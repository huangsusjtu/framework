!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ATOMIC_INIT	atomic.h	53;"	d
AUTOMUTEX	auto_mutex.h	2;"	d
AutoMutex	auto_mutex.cpp	/^AutoMutex::AutoMutex(mutex* m)$/;"	f	class:AutoMutex	signature:(mutex* m)
AutoMutex	auto_mutex.h	/^		AutoMutex(const AutoMutex& t);$/;"	p	class:AutoMutex	access:private	signature:(const AutoMutex& t)
AutoMutex	auto_mutex.h	/^		AutoMutex(mutex *m);$/;"	p	class:AutoMutex	access:public	signature:(mutex *m)
AutoMutex	auto_mutex.h	/^class AutoMutex$/;"	c
AutoMutex::AutoMutex	auto_mutex.cpp	/^AutoMutex::AutoMutex(mutex* m)$/;"	f	class:AutoMutex	signature:(mutex* m)
AutoMutex::AutoMutex	auto_mutex.h	/^		AutoMutex(const AutoMutex& t);$/;"	p	class:AutoMutex	access:private	signature:(const AutoMutex& t)
AutoMutex::AutoMutex	auto_mutex.h	/^		AutoMutex(mutex *m);$/;"	p	class:AutoMutex	access:public	signature:(mutex *m)
AutoMutex::mMutex	auto_mutex.h	/^		mutex *mMutex = NULL;$/;"	m	class:AutoMutex	access:private
AutoMutex::mutex	auto_mutex.h	/^	typedef pthread_mutex_t mutex;$/;"	t	class:AutoMutex	access:private
AutoMutex::operator =	auto_mutex.h	/^		AutoMutex& operator=(const AutoMutex& t);$/;"	p	class:AutoMutex	access:private	signature:(const AutoMutex& t)
AutoMutex::~AutoMutex	auto_mutex.cpp	/^AutoMutex::~AutoMutex()$/;"	f	class:AutoMutex	signature:()
AutoMutex::~AutoMutex	auto_mutex.h	/^		~AutoMutex();$/;"	p	class:AutoMutex	access:public	signature:()
BASE_EVENT_	commond.h	2;"	d
BASE_QUEUE_	queue.h	2;"	d
BLOCKNUM	memblockpool.h	/^		BLOCKNUM = 10,$/;"	e	enum:MemBlockPool::__anon5
BLOCKSIZE	memblockpool.h	/^		BLOCKSIZE = 1<<20$/;"	e	enum:MemBlockPool::__anon5
CFLAG	Makefile	/^CFLAG = -std=c++11  $/;"	m
CFLAG	test/Makefile	/^CFLAG = -std=c++11  -I$(INCLUDE)$/;"	m
CLIENTSOCKET	clientsocket.h	2;"	d
CONNECTED_SOCKET_EVENT	tcpsocketevent.h	2;"	d
CONTENT	logger.h	19;"	d
CXX	Makefile	/^CXX = g++$/;"	m
CXX	test/Makefile	/^CXX = g++$/;"	m
ClientSocket	clientsocket.cpp	/^ClientSocket::ClientSocket(): Socket()$/;"	f	class:net::ClientSocket	signature:()
ClientSocket	clientsocket.h	/^		ClientSocket();$/;"	p	class:net::ClientSocket	access:public	signature:()
ClientSocket	clientsocket.h	/^		ClientSocket(const ClientSocket &T);$/;"	p	class:net::ClientSocket	access:private	signature:(const ClientSocket &T)
ClientSocket	clientsocket.h	/^class ClientSocket : public Socket$/;"	c	namespace:net	inherits:Socket
Collection	memblockpool.h	/^	typedef std::list<class MemBlock*> Collection;$/;"	t	class:MemBlockPool	access:private
Collection	packetqueue.h	/^	typedef std::list<class Packet*> Collection;$/;"	t	class:net::PacketQueue	access:private
Collection	queue.h	/^	typedef std::list<T*> Collection;$/;"	t	class:sys::Queue	access:private
Commond	commond.cpp	/^Commond::Commond(TYPE type): _type(type)$/;"	f	class:sys::Commond	signature:(TYPE type)
Commond	commond.h	/^		Commond(TYPE type = TYPE::DEFAULT);$/;"	p	class:sys::Commond	access:public	signature:(TYPE type = TYPE::DEFAULT)
Commond	commond.h	/^class Commond$/;"	c	namespace:sys
CommondQueue	taskqueuethread.h	/^		CommondQueue(){}$/;"	f	class:sys::CommondQueue	access:public	signature:()
CommondQueue	taskqueuethread.h	/^		CommondQueue(const CommondQueue &T);$/;"	p	class:sys::CommondQueue	access:private	signature:(const CommondQueue &T)
CommondQueue	taskqueuethread.h	/^class CommondQueue : public Queue<Commond>$/;"	c	namespace:sys	inherits:Queue
ConnectedSocket	socket.h	/^		ConnectedSocket(int sockfd){sock_fd = sockfd;}$/;"	f	class:net::ConnectedSocket	access:public	signature:(int sockfd)
ConnectedSocket	socket.h	/^class ConnectedSocket : public Socket$/;"	c	namespace:net	inherits:Socket
Connection	connection.cpp	/^Connection::Connection(Socket* sock, sockaddr *addr, size_t addrlen) :$/;"	f	class:net::Connection	signature:(Socket* sock, sockaddr *addr, size_t addrlen)
Connection	connection.h	/^		Connection(Socket* sock, sockaddr *addr=NULL, size_t addrlen=0);$/;"	p	class:net::Connection	access:public	signature:(Socket* sock, sockaddr *addr=NULL, size_t addrlen=0)
Connection	connection.h	/^class Connection{$/;"	c	namespace:net
ConnectionManager	connectionmanager.cpp	/^ConnectionManager::ConnectionManager()$/;"	f	class:net::ConnectionManager	signature:()
ConnectionManager	connectionmanager.h	/^		ConnectionManager();$/;"	p	class:net::ConnectionManager	access:private	signature:()
ConnectionManager	connectionmanager.h	/^		ConnectionManager(const ConnectionManager &T);$/;"	p	class:net::ConnectionManager	access:private	signature:(const ConnectionManager &T)
ConnectionManager	connectionmanager.h	/^class ConnectionManager : public Lock{$/;"	c	namespace:net	inherits:Lock
DEBUG	logger.h	18;"	d
DEFAULT	commond.h	/^			DEFAULT,$/;"	e	enum:sys::Commond::TYPE
ERR	logger.h	15;"	d
ERROR	commond.h	/^			ERROR$/;"	e	enum:sys::Commond::TYPE
EVENT_DRIVER_	event_driver.h	6;"	d
EventDescripter	event_driver.h	/^		EventDescripter():fd(-1){}$/;"	f	class:EventDescripter	access:public	signature:()
EventDescripter	event_driver.h	/^		EventDescripter(const EventDescripter& T);$/;"	p	class:EventDescripter	access:private	signature:(const EventDescripter& T)
EventDescripter	event_driver.h	/^		EventDescripter(int FD,  uint32_t eventtype = EPOLLIN | EPOLLRDHUP):fd(FD){$/;"	f	class:EventDescripter	access:public	signature:(int FD, uint32_t eventtype = EPOLLIN | EPOLLRDHUP)
EventDescripter	event_driver.h	/^class EventDescripter $/;"	c
EventDescripter::EventDescripter	event_driver.h	/^		EventDescripter():fd(-1){}$/;"	f	class:EventDescripter	access:public	signature:()
EventDescripter::EventDescripter	event_driver.h	/^		EventDescripter(const EventDescripter& T);$/;"	p	class:EventDescripter	access:private	signature:(const EventDescripter& T)
EventDescripter::EventDescripter	event_driver.h	/^		EventDescripter(int FD,  uint32_t eventtype = EPOLLIN | EPOLLRDHUP):fd(FD){$/;"	f	class:EventDescripter	access:public	signature:(int FD, uint32_t eventtype = EPOLLIN | EPOLLRDHUP)
EventDescripter::event	event_driver.h	/^		struct epoll_event event;$/;"	m	class:EventDescripter	typeref:struct:EventDescripter::epoll_event	access:private
EventDescripter::eventHandler	event_driver.h	/^		virtual void eventHandler(struct epoll_event &ev)=0;$/;"	p	class:EventDescripter	access:public	signature:(struct epoll_event &ev)
EventDescripter::fd	event_driver.h	/^		int fd;$/;"	m	class:EventDescripter	access:private
EventDescripter::getEvent	event_driver.h	/^		struct epoll_event* getEvent(){$/;"	f	class:EventDescripter	access:public	signature:()
EventDescripter::getfd	event_driver.h	/^		int getfd()const{$/;"	f	class:EventDescripter	access:public	signature:() const
EventDescripter::operator =	event_driver.h	/^		EventDescripter& operator=(const EventDescripter& T);$/;"	p	class:EventDescripter	access:private	signature:(const EventDescripter& T)
EventDescripter::setEvent	event_driver.h	/^		void setEvent(int FD,uint32_t eventtype = EPOLLIN | EPOLLRDHUP)$/;"	f	class:EventDescripter	access:public	signature:(int FD,uint32_t eventtype = EPOLLIN | EPOLLRDHUP)
EventDescripter::~EventDescripter	event_driver.h	/^		virtual ~EventDescripter()$/;"	f	class:EventDescripter	access:public	signature:()
EventDriver	event_driver.cpp	/^EventDriver::EventDriver()$/;"	f	class:EventDriver	signature:()
EventDriver	event_driver.h	/^		EventDriver();$/;"	p	class:EventDriver	access:public	signature:()
EventDriver	event_driver.h	/^		EventDriver(EventDriver& T);$/;"	p	class:EventDriver	access:private	signature:(EventDriver& T)
EventDriver	event_driver.h	/^class EventDriver$/;"	c
EventDriver::EventDriver	event_driver.cpp	/^EventDriver::EventDriver()$/;"	f	class:EventDriver	signature:()
EventDriver::EventDriver	event_driver.h	/^		EventDriver();$/;"	p	class:EventDriver	access:public	signature:()
EventDriver::EventDriver	event_driver.h	/^		EventDriver(EventDriver& T);$/;"	p	class:EventDriver	access:private	signature:(EventDriver& T)
EventDriver::MAX_ACTIVE_EVENT	event_driver.h	/^			MAX_ACTIVE_EVENT = 1000$/;"	e	enum:EventDriver::__anon3
EventDriver::addEventDescripter	event_driver.cpp	/^bool EventDriver::addEventDescripter(EventDescripter *eventdesc)$/;"	f	class:EventDriver	signature:(EventDescripter *eventdesc)
EventDriver::addEventDescripter	event_driver.h	/^		virtual bool addEventDescripter(EventDescripter *eventdesc);$/;"	p	class:EventDriver	access:public	signature:(EventDescripter *eventdesc)
EventDriver::dispatchEvent	event_driver.h	/^		virtual void dispatchEvent(struct epoll_event &activeEvent)=0;$/;"	p	class:EventDriver	access:public	signature:(struct epoll_event &activeEvent)
EventDriver::epollfd	event_driver.h	/^		int epollfd;$/;"	m	class:EventDriver	access:private
EventDriver::ev	event_driver.h	/^		struct epoll_event ev;	$/;"	m	class:EventDriver	typeref:struct:EventDriver::epoll_event	access:private
EventDriver::eventbuffer	event_driver.h	/^		struct epoll_event *eventbuffer;$/;"	m	class:EventDriver	typeref:struct:EventDriver::epoll_event	access:private
EventDriver::handleEventLoop	event_driver.cpp	/^void EventDriver::handleEventLoop()$/;"	f	class:EventDriver	signature:()
EventDriver::handleEventLoop	event_driver.h	/^		void handleEventLoop();$/;"	p	class:EventDriver	access:public	signature:()
EventDriver::operator =	event_driver.h	/^		EventDriver& operator=(EventDriver& T);$/;"	p	class:EventDriver	access:private	signature:(EventDriver& T)
EventDriver::test	event_driver.cpp	/^void EventDriver::test()$/;"	f	class:EventDriver	signature:()
EventDriver::test	event_driver.h	/^		static void test();$/;"	p	class:EventDriver	access:public	signature:()
EventDriver::~EventDriver	event_driver.cpp	/^EventDriver::~EventDriver()$/;"	f	class:EventDriver	signature:()
EventDriver::~EventDriver	event_driver.h	/^		virtual ~EventDriver();$/;"	p	class:EventDriver	access:public	signature:()
GetInstance	mempool.h	/^			static class Mempool<T, EXPANSION_SIZE>& GetInstance(size_t size=EXPANSION_SIZE){$/;"	f	class:Mempool	access:public	signature:(size_t size=EXPANSION_SIZE)
HashBucketSize	connectionmanager.h	/^		HashBucketSize = 1024$/;"	e	enum:net::ConnectionManager::__anon2
HashCollection	connectionmanager.h	/^	typedef std::unordered_map<int, class Connection*> HashCollection;$/;"	t	class:net::ConnectionManager	access:private
HashIter	connectionmanager.h	/^	typedef HashCollection::iterator HashIter;$/;"	t	class:net::ConnectionManager	access:private
INCLUDE	test/Makefile	/^INCLUDE := ..\/$/;"	m
INFO	logger.h	16;"	d
Iterator	memblockpool.h	/^	typedef Collection::iterator Iterator;$/;"	t	class:MemBlockPool	access:private
LIBS	Makefile	/^LIBS = -lpthread $/;"	m
LIBS	test/Makefile	/^LIBS = -lpthread $/;"	m
LINK	Makefile	/^LINK = g++$/;"	m
LINK	test/Makefile	/^LINK = g++$/;"	m
LISTEN_SOCKET_EVENT_	listensocketevent.h	2;"	d
LOCK	atomic.h	44;"	d
LOCK_	lock.h	2;"	d
LOGBUF_SIZE	logger.h	/^	LOGBUF_SIZE = 4096,$/;"	e	enum:sys::__anon4
LOGGER_	logger.h	2;"	d
ListCollection	connectionmanager.h	/^	typedef std::forward_list<class Connection*> ListCollection;$/;"	t	class:net::ConnectionManager	access:private
ListIter	connectionmanager.h	/^	typedef ListCollection::iterator ListIter;$/;"	t	class:net::ConnectionManager	access:private
ListenEvent	listensocketevent.cpp	/^ListenEvent::ListenEvent(int fd):$/;"	f	class:net::ListenEvent	signature:(int fd)
ListenEvent	listensocketevent.h	/^		ListenEvent(const ListenEvent &T);$/;"	p	class:net::ListenEvent	access:private	signature:(const ListenEvent &T)
ListenEvent	listensocketevent.h	/^		ListenEvent(int fd);$/;"	p	class:net::ListenEvent	access:public	signature:(int fd)
ListenEvent	listensocketevent.h	/^class ListenEvent : public EventDescripter{$/;"	c	namespace:net	inherits:EventDescripter
ListenEventQueue	listensocketevent.cpp	/^ListenEventQueue::ListenEventQueue():$/;"	f	class:net::ListenEventQueue	signature:()
ListenEventQueue	listensocketevent.h	/^		ListenEventQueue();$/;"	p	class:net::ListenEventQueue	access:private	signature:()
ListenEventQueue	listensocketevent.h	/^		ListenEventQueue(const ListenEventQueue &T);$/;"	p	class:net::ListenEventQueue	access:private	signature:(const ListenEventQueue &T)
ListenEventQueue	listensocketevent.h	/^class ListenEventQueue{$/;"	c	namespace:net
Lock	lock.cpp	/^Lock::Lock()$/;"	f	class:Lock	signature:()
Lock	lock.h	/^		Lock();$/;"	p	class:Lock	access:public	signature:()
Lock	lock.h	/^		Lock(const Lock& T);$/;"	p	class:Lock	access:private	signature:(const Lock& T)
Lock	lock.h	/^class Lock$/;"	c
Lock::Lock	lock.cpp	/^Lock::Lock()$/;"	f	class:Lock	signature:()
Lock::Lock	lock.h	/^		Lock();$/;"	p	class:Lock	access:public	signature:()
Lock::Lock	lock.h	/^		Lock(const Lock& T);$/;"	p	class:Lock	access:private	signature:(const Lock& T)
Lock::lock	lock.cpp	/^void Lock::lock()$/;"	f	class:Lock	signature:()
Lock::lock	lock.h	/^		void lock();$/;"	p	class:Lock	access:public	signature:()
Lock::mMutex	lock.h	/^		mutex mMutex;$/;"	m	class:Lock	access:private
Lock::mutex	lock.h	/^	typedef pthread_mutex_t mutex;$/;"	t	class:Lock	access:private
Lock::operator =	lock.h	/^		Lock& operator=(const Lock& T);$/;"	p	class:Lock	access:private	signature:(const Lock& T)
Lock::trylock	lock.cpp	/^void Lock::trylock()$/;"	f	class:Lock	signature:()
Lock::trylock	lock.h	/^		void trylock();$/;"	p	class:Lock	access:public	signature:()
Lock::unlock	lock.cpp	/^void Lock::unlock()$/;"	f	class:Lock	signature:()
Lock::unlock	lock.h	/^		void unlock();$/;"	p	class:Lock	access:public	signature:()
Lock::~Lock	lock.cpp	/^Lock::~Lock()$/;"	f	class:Lock	signature:()
Lock::~Lock	lock.h	/^		virtual ~Lock();$/;"	p	class:Lock	access:public	signature:()
Logger	logger.cpp	/^Logger::Logger():$/;"	f	class:sys::Logger	signature:()
Logger	logger.h	/^		Logger();$/;"	p	class:sys::Logger	access:private	signature:()
Logger	logger.h	/^		Logger(const Logger &T);$/;"	p	class:sys::Logger	access:private	signature:(const Logger &T)
Logger	logger.h	/^class Logger : public Lock{$/;"	c	namespace:sys	inherits:Lock
LoggerBuffer	logger.cpp	/^LoggerBuffer::LoggerBuffer():$/;"	f	class:sys::LoggerBuffer	signature:()
LoggerBuffer	logger.h	/^		LoggerBuffer();$/;"	p	class:sys::LoggerBuffer	access:public	signature:()
LoggerBuffer	logger.h	/^		LoggerBuffer(const LoggerBuffer &T);$/;"	p	class:sys::LoggerBuffer	access:private	signature:(const LoggerBuffer &T)
LoggerBuffer	logger.h	/^class LoggerBuffer{$/;"	c	namespace:sys
MAX_ACTIVE_EVENT	event_driver.h	/^			MAX_ACTIVE_EVENT = 1000$/;"	e	enum:EventDriver::__anon3
MEMBLOCK	memblock.h	2;"	d
MEMPOOL	mempool.h	2;"	d
MEM_BLOCK_POOL	memblockpool.h	2;"	d
MEM_BUFFER_	membuffer.h	2;"	d
MESSAGE	message.h	2;"	d
MESSAGE_QUEUE	messagequeue.h	2;"	d
MemBlock	memblock.cpp	/^MemBlock::MemBlock(MemBlockPool *parent, int blocksize):StrongRef(),buffer(NULL)$/;"	f	class:MemBlock	signature:(MemBlockPool *parent, int blocksize)
MemBlock	memblock.h	/^		MemBlock(MemBlockPool *parent, int blocksize);$/;"	p	class:MemBlock	access:public	signature:(MemBlockPool *parent, int blocksize)
MemBlock	memblock.h	/^		MemBlock(const MemBlock& T);$/;"	p	class:MemBlock	access:private	signature:(const MemBlock& T)
MemBlock	memblock.h	/^class MemBlock : public StrongRef ,public Lock$/;"	c	inherits:StrongRef,Lock
MemBlock::MemBlock	memblock.cpp	/^MemBlock::MemBlock(MemBlockPool *parent, int blocksize):StrongRef(),buffer(NULL)$/;"	f	class:MemBlock	signature:(MemBlockPool *parent, int blocksize)
MemBlock::MemBlock	memblock.h	/^		MemBlock(MemBlockPool *parent, int blocksize);$/;"	p	class:MemBlock	access:public	signature:(MemBlockPool *parent, int blocksize)
MemBlock::MemBlock	memblock.h	/^		MemBlock(const MemBlock& T);$/;"	p	class:MemBlock	access:private	signature:(const MemBlock& T)
MemBlock::allocMemBuffer	memblock.cpp	/^bool MemBlock::allocMemBuffer(MemBuffer &T,size_t need)$/;"	f	class:MemBlock	signature:(MemBuffer &T,size_t need)
MemBlock::allocMemBuffer	memblock.h	/^		bool allocMemBuffer(MemBuffer &T, size_t need);$/;"	p	class:MemBlock	access:public	signature:(MemBuffer &T, size_t need)
MemBlock::buffer	memblock.h	/^		char* buffer;$/;"	m	class:MemBlock	access:private
MemBlock::bufsize	memblock.h	/^		size_t bufsize;$/;"	m	class:MemBlock	access:private
MemBlock::contains	memblock.cpp	/^bool MemBlock::contains(const MemBuffer& T){$/;"	f	class:MemBlock	signature:(const MemBuffer& T)
MemBlock::contains	memblock.h	/^		inline bool contains(const MemBuffer &T);$/;"	p	class:MemBlock	access:private	signature:(const MemBuffer &T)
MemBlock::finalize	memblock.cpp	/^void MemBlock::finalize()$/;"	f	class:MemBlock	signature:()
MemBlock::finalize	memblock.h	/^		void finalize();$/;"	p	class:MemBlock	access:public	signature:()
MemBlock::freeMemBuffer	memblock.cpp	/^void MemBlock::freeMemBuffer(MemBuffer& T)$/;"	f	class:MemBlock	signature:(MemBuffer& T)
MemBlock::freeMemBuffer	memblock.h	/^		void freeMemBuffer(MemBuffer& T);$/;"	p	class:MemBlock	access:public	signature:(MemBuffer& T)
MemBlock::freesize	memblock.h	/^		size_t pos, freesize;$/;"	m	class:MemBlock	access:private
MemBlock::hasSpace	memblock.h	/^		inline bool hasSpace(size_t need){$/;"	f	class:MemBlock	access:public	signature:(size_t need)
MemBlock::mParent	memblock.h	/^		MemBlockPool *mParent;$/;"	m	class:MemBlock	access:private
MemBlock::operator =	memblock.h	/^		MemBlock& operator=(const MemBlock& T);$/;"	p	class:MemBlock	access:private	signature:(const MemBlock& T)
MemBlock::pos	memblock.h	/^		size_t pos, freesize;$/;"	m	class:MemBlock	access:private
MemBlock::~MemBlock	memblock.cpp	/^MemBlock::~MemBlock()$/;"	f	class:MemBlock	signature:()
MemBlock::~MemBlock	memblock.h	/^		virtual ~MemBlock();$/;"	p	class:MemBlock	access:public	signature:()
MemBlockPool	memblockpool.cpp	/^MemBlockPool::MemBlockPool(int blockNum)$/;"	f	class:MemBlockPool	signature:(int blockNum)
MemBlockPool	memblockpool.h	/^		MemBlockPool(const MemBlockPool& T);$/;"	p	class:MemBlockPool	access:private	signature:(const MemBlockPool& T)
MemBlockPool	memblockpool.h	/^		MemBlockPool(int blockNum = BLOCKNUM);$/;"	p	class:MemBlockPool	access:public	signature:(int blockNum = BLOCKNUM)
MemBlockPool	memblockpool.h	/^class MemBlockPool$/;"	c
MemBlockPool::BLOCKNUM	memblockpool.h	/^		BLOCKNUM = 10,$/;"	e	enum:MemBlockPool::__anon5
MemBlockPool::BLOCKSIZE	memblockpool.h	/^		BLOCKSIZE = 1<<20$/;"	e	enum:MemBlockPool::__anon5
MemBlockPool::Collection	memblockpool.h	/^	typedef std::list<class MemBlock*> Collection;$/;"	t	class:MemBlockPool	access:private
MemBlockPool::Iterator	memblockpool.h	/^	typedef Collection::iterator Iterator;$/;"	t	class:MemBlockPool	access:private
MemBlockPool::MemBlockPool	memblockpool.cpp	/^MemBlockPool::MemBlockPool(int blockNum)$/;"	f	class:MemBlockPool	signature:(int blockNum)
MemBlockPool::MemBlockPool	memblockpool.h	/^		MemBlockPool(const MemBlockPool& T);$/;"	p	class:MemBlockPool	access:private	signature:(const MemBlockPool& T)
MemBlockPool::MemBlockPool	memblockpool.h	/^		MemBlockPool(int blockNum = BLOCKNUM);$/;"	p	class:MemBlockPool	access:public	signature:(int blockNum = BLOCKNUM)
MemBlockPool::cur	memblockpool.h	/^		MemBlock* cur;$/;"	m	class:MemBlockPool	access:private
MemBlockPool::expandMemBlock	memblockpool.cpp	/^bool MemBlockPool::expandMemBlock()$/;"	f	class:MemBlockPool	signature:()
MemBlockPool::expandMemBlock	memblockpool.h	/^		bool expandMemBlock();$/;"	p	class:MemBlockPool	access:public	signature:()
MemBlockPool::getLength	memblockpool.h	/^		int getLength(){$/;"	f	class:MemBlockPool	access:public	signature:()
MemBlockPool::getMemBuffer	memblockpool.cpp	/^bool MemBlockPool::getMemBuffer(MemBuffer *T,size_t need)$/;"	f	class:MemBlockPool	signature:(MemBuffer *T,size_t need)
MemBlockPool::getMemBuffer	memblockpool.h	/^		bool getMemBuffer(MemBuffer *T,size_t need);$/;"	p	class:MemBlockPool	access:public	signature:(MemBuffer *T,size_t need)
MemBlockPool::instance	memblockpool.h	/^		static MemBlockPool& instance(){$/;"	f	class:MemBlockPool	access:public	signature:()
MemBlockPool::mDataBlocks	memblockpool.h	/^		Collection mDataBlocks;$/;"	m	class:MemBlockPool	access:private
MemBlockPool::mMutex	memblockpool.h	/^		mutex mMutex;$/;"	m	class:MemBlockPool	access:private
MemBlockPool::mutex	memblockpool.h	/^	typedef pthread_mutex_t mutex;$/;"	t	class:MemBlockPool	access:private
MemBlockPool::operator =	memblockpool.h	/^		MemBlockPool operator=(const MemBlockPool& T);$/;"	p	class:MemBlockPool	access:private	signature:(const MemBlockPool& T)
MemBlockPool::putMemBlock	memblockpool.cpp	/^void MemBlockPool::putMemBlock(MemBlock* T)$/;"	f	class:MemBlockPool	signature:(MemBlock* T)
MemBlockPool::putMemBlock	memblockpool.h	/^		void putMemBlock(MemBlock* T);$/;"	p	class:MemBlockPool	access:public	signature:(MemBlock* T)
MemBlockPool::self	memblockpool.cpp	/^MemBlockPool MemBlockPool::self;$/;"	m	class:MemBlockPool	file:
MemBlockPool::self	memblockpool.h	/^		static MemBlockPool self;		$/;"	m	class:MemBlockPool	access:public
MemBlockPool::shrinkMemBlock	memblockpool.cpp	/^bool MemBlockPool::shrinkMemBlock()$/;"	f	class:MemBlockPool	signature:()
MemBlockPool::shrinkMemBlock	memblockpool.h	/^		bool shrinkMemBlock();$/;"	p	class:MemBlockPool	access:public	signature:()
MemBlockPool::~MemBlockPool	memblockpool.cpp	/^MemBlockPool::~MemBlockPool()$/;"	f	class:MemBlockPool	signature:()
MemBlockPool::~MemBlockPool	memblockpool.h	/^		~MemBlockPool();$/;"	p	class:MemBlockPool	access:public	signature:()
MemBuffer	membuffer.cpp	/^MemBuffer::MemBuffer():mData(NULL),mSize(0),mPos(0),owner(NULL)$/;"	f	class:MemBuffer	signature:()
MemBuffer	membuffer.cpp	/^MemBuffer::MemBuffer(char* data, size_t size):mData(data),mSize(size),mPos(0),owner(NULL)$/;"	f	class:MemBuffer	signature:(char* data, size_t size)
MemBuffer	membuffer.cpp	/^MemBuffer::MemBuffer(const MemBuffer& T)$/;"	f	class:MemBuffer	signature:(const MemBuffer& T)
MemBuffer	membuffer.h	/^		MemBuffer();$/;"	p	class:MemBuffer	access:public	signature:()
MemBuffer	membuffer.h	/^		MemBuffer(char* data, size_t size);$/;"	p	class:MemBuffer	access:public	signature:(char* data, size_t size)
MemBuffer	membuffer.h	/^		MemBuffer(const MemBuffer& T);$/;"	p	class:MemBuffer	access:public	signature:(const MemBuffer& T)
MemBuffer	membuffer.h	/^class MemBuffer$/;"	c
MemBuffer::MemBuffer	membuffer.cpp	/^MemBuffer::MemBuffer():mData(NULL),mSize(0),mPos(0),owner(NULL)$/;"	f	class:MemBuffer	signature:()
MemBuffer::MemBuffer	membuffer.cpp	/^MemBuffer::MemBuffer(char* data, size_t size):mData(data),mSize(size),mPos(0),owner(NULL)$/;"	f	class:MemBuffer	signature:(char* data, size_t size)
MemBuffer::MemBuffer	membuffer.cpp	/^MemBuffer::MemBuffer(const MemBuffer& T)$/;"	f	class:MemBuffer	signature:(const MemBuffer& T)
MemBuffer::MemBuffer	membuffer.h	/^		MemBuffer();$/;"	p	class:MemBuffer	access:public	signature:()
MemBuffer::MemBuffer	membuffer.h	/^		MemBuffer(char* data, size_t size);$/;"	p	class:MemBuffer	access:public	signature:(char* data, size_t size)
MemBuffer::MemBuffer	membuffer.h	/^		MemBuffer(const MemBuffer& T);$/;"	p	class:MemBuffer	access:public	signature:(const MemBuffer& T)
MemBuffer::append	membuffer.cpp	/^bool MemBuffer::append(MemBuffer &T)$/;"	f	class:MemBuffer	signature:(MemBuffer &T)
MemBuffer::append	membuffer.cpp	/^bool MemBuffer::append(const char* data, size_t size)$/;"	f	class:MemBuffer	signature:(const char* data, size_t size)
MemBuffer::append	membuffer.h	/^		inline bool append(MemBuffer &T);$/;"	p	class:MemBuffer	access:public	signature:(MemBuffer &T)
MemBuffer::append	membuffer.h	/^		inline bool append(const char*data, size_t size);$/;"	p	class:MemBuffer	access:public	signature:(const char*data, size_t size)
MemBuffer::copyFromBuffer	membuffer.cpp	/^bool MemBuffer::copyFromBuffer(MemBuffer &T)$/;"	f	class:MemBuffer	signature:(MemBuffer &T)
MemBuffer::copyFromBuffer	membuffer.cpp	/^bool MemBuffer::copyFromBuffer(char *data, size_t size)$/;"	f	class:MemBuffer	signature:(char *data, size_t size)
MemBuffer::copyFromBuffer	membuffer.h	/^		inline bool copyFromBuffer(MemBuffer &T);$/;"	p	class:MemBuffer	access:public	signature:(MemBuffer &T)
MemBuffer::copyFromBuffer	membuffer.h	/^		inline bool copyFromBuffer(char* data, size_t size);$/;"	p	class:MemBuffer	access:public	signature:(char* data, size_t size)
MemBuffer::copyToBuffer	membuffer.cpp	/^bool MemBuffer::copyToBuffer(const MemBuffer& T)$/;"	f	class:MemBuffer	signature:(const MemBuffer& T)
MemBuffer::copyToBuffer	membuffer.cpp	/^bool MemBuffer::copyToBuffer(const char* data, size_t size)$/;"	f	class:MemBuffer	signature:(const char* data, size_t size)
MemBuffer::copyToBuffer	membuffer.h	/^		inline bool copyToBuffer(const MemBuffer &T);$/;"	p	class:MemBuffer	access:public	signature:(const MemBuffer &T)
MemBuffer::copyToBuffer	membuffer.h	/^		inline bool copyToBuffer(const char* data, size_t size);$/;"	p	class:MemBuffer	access:public	signature:(const char* data, size_t size)
MemBuffer::isFree	membuffer.h	/^		inline bool  isFree(){$/;"	f	class:MemBuffer	access:public	signature:()
MemBuffer::mData	membuffer.h	/^		char* mData;$/;"	m	class:MemBuffer	access:public
MemBuffer::mPos	membuffer.h	/^		size_t mPos;$/;"	m	class:MemBuffer	access:public
MemBuffer::mSize	membuffer.h	/^		size_t mSize;$/;"	m	class:MemBuffer	access:public
MemBuffer::operator =	membuffer.cpp	/^MemBuffer& MemBuffer::operator=(const MemBuffer &T)$/;"	f	class:MemBuffer	signature:(const MemBuffer &T)
MemBuffer::operator =	membuffer.h	/^		MemBuffer& operator=(const MemBuffer& T);$/;"	p	class:MemBuffer	access:public	signature:(const MemBuffer& T)
MemBuffer::operator ==	membuffer.cpp	/^bool MemBuffer::operator==(const MemBuffer& T)const$/;"	f	class:MemBuffer	signature:(const MemBuffer& T) const
MemBuffer::operator ==	membuffer.h	/^		inline bool operator==(const MemBuffer& T)const;$/;"	p	class:MemBuffer	access:public	signature:(const MemBuffer& T) const
MemBuffer::owner	membuffer.h	/^		MemBlock* owner;$/;"	m	class:MemBuffer	access:public
MemBuffer::~MemBuffer	membuffer.cpp	/^MemBuffer::~MemBuffer()$/;"	f	class:MemBuffer	signature:()
MemBuffer::~MemBuffer	membuffer.h	/^		~MemBuffer();$/;"	p	class:MemBuffer	access:public	signature:()
Mempool	mempool.h	/^		Mempool(const Mempool<T, EXPANSION_SIZE>& );$/;"	p	class:Mempool	access:private	signature:(const Mempool<T, EXPANSION_SIZE>& )
Mempool	mempool.h	/^		Mempool(size_t size = EXPANSION_SIZE);$/;"	p	class:Mempool	access:private	signature:(size_t size = EXPANSION_SIZE)
Mempool	mempool.h	/^Mempool<T, EXPANSION_SIZE>::Mempool(size_t size) : next(NULL),length(0)$/;"	f	class:Mempool	signature:(size_t size)
Mempool	mempool.h	/^class Mempool$/;"	c
Mempool::GetInstance	mempool.h	/^			static class Mempool<T, EXPANSION_SIZE>& GetInstance(size_t size=EXPANSION_SIZE){$/;"	f	class:Mempool	access:public	signature:(size_t size=EXPANSION_SIZE)
Mempool::Mempool	mempool.h	/^		Mempool(const Mempool<T, EXPANSION_SIZE>& );$/;"	p	class:Mempool	access:private	signature:(const Mempool<T, EXPANSION_SIZE>& )
Mempool::Mempool	mempool.h	/^		Mempool(size_t size = EXPANSION_SIZE);$/;"	p	class:Mempool	access:private	signature:(size_t size = EXPANSION_SIZE)
Mempool::Mempool	mempool.h	/^Mempool<T, EXPANSION_SIZE>::Mempool(size_t size) : next(NULL),length(0)$/;"	f	class:Mempool	signature:(size_t size)
Mempool::ReleaseInstance	mempool.h	/^			static void ReleaseInstance(){$/;"	f	class:Mempool	access:public	signature:()
Mempool::alloc	mempool.h	/^		void* alloc();$/;"	p	class:Mempool	access:public	signature:()
Mempool::alloc	mempool.h	/^void* Mempool<T, EXPANSION_SIZE>::alloc()$/;"	f	class:Mempool	signature:()
Mempool::expand	mempool.h	/^		void expand(size_t size = EXPANSION_SIZE);$/;"	p	class:Mempool	access:private	signature:(size_t size = EXPANSION_SIZE)
Mempool::expand	mempool.h	/^void Mempool<T, EXPANSION_SIZE>::expand(size_t size)$/;"	f	class:Mempool	signature:(size_t size)
Mempool::free	mempool.h	/^		void free(void*);$/;"	p	class:Mempool	access:public	signature:(void*)
Mempool::free	mempool.h	/^void Mempool<T, EXPANSION_SIZE>::free(void* p)$/;"	f	class:Mempool	signature:(void* p)
Mempool::length	mempool.h	/^		size_t length;$/;"	m	class:Mempool	access:private
Mempool::mMutex	mempool.h	/^		static pthread_mutex_t mMutex ;$/;"	m	class:Mempool	access:private
Mempool::mMutex	mempool.h	/^pthread_mutex_t Mempool<T, EXPANSION_SIZE>::mMutex = PTHREAD_MUTEX_INITIALIZER;$/;"	m	class:Mempool
Mempool::next	mempool.h	/^		Mempool<T, EXPANSION_SIZE> *next;$/;"	m	class:Mempool	access:private
Mempool::objsize	mempool.h	/^		static size_t objsize ;$/;"	m	class:Mempool	access:private
Mempool::objsize	mempool.h	/^size_t Mempool<T, EXPANSION_SIZE>::objsize = sizeof(Mempool<T, EXPANSION_SIZE>)>sizeof(T)?sizeof(Mempool<T, EXPANSION_SIZE>):sizeof(T);$/;"	m	class:Mempool
Mempool::operator =	mempool.h	/^		Mempool<T, EXPANSION_SIZE>& operator=(const Mempool<T,EXPANSION_SIZE>& );$/;"	p	class:Mempool	access:private	signature:(const Mempool<T,EXPANSION_SIZE>& )
Mempool::self	mempool.h	/^		static Mempool<T, EXPANSION_SIZE> *self;$/;"	m	class:Mempool	access:private
Mempool::self	mempool.h	/^Mempool<T, EXPANSION_SIZE>* Mempool<T, EXPANSION_SIZE>::self = NULL;$/;"	m	class:Mempool
Mempool::shrink	mempool.h	/^		void shrink();$/;"	p	class:Mempool	access:private	signature:()
Mempool::shrink	mempool.h	/^void Mempool<T,EXPANSION_SIZE>::shrink()$/;"	f	class:Mempool	signature:()
Mempool::~Mempool	mempool.h	/^		~Mempool();$/;"	p	class:Mempool	access:private	signature:()
Mempool::~Mempool	mempool.h	/^Mempool<T, EXPANSION_SIZE>::~Mempool()$/;"	f	class:Mempool	signature:()
Message	message.h	/^		Message():next(NULL){};$/;"	f	class:Message	access:protected	signature:()
Message	message.h	/^		Message(const Message &m){};$/;"	f	class:Message	access:private	signature:(const Message &m)
Message	message.h	/^		Message(const char* m):what(m),next(NULL){};$/;"	f	class:Message	access:protected	signature:(const char* m)
Message	message.h	/^		Message(string &m): what(m),next(NULL){};$/;"	f	class:Message	access:protected	signature:(string &m)
Message	message.h	/^class Message : public Runnable$/;"	c	inherits:Runnable
Message::Message	message.h	/^		Message():next(NULL){};$/;"	f	class:Message	access:protected	signature:()
Message::Message	message.h	/^		Message(const Message &m){};$/;"	f	class:Message	access:private	signature:(const Message &m)
Message::Message	message.h	/^		Message(const char* m):what(m),next(NULL){};$/;"	f	class:Message	access:protected	signature:(const char* m)
Message::Message	message.h	/^		Message(string &m): what(m),next(NULL){};$/;"	f	class:Message	access:protected	signature:(string &m)
Message::clear	message.h	/^		static void clear(Message *m){ delete m;}$/;"	f	class:Message	access:public	signature:(Message *m)
Message::getNext	message.h	/^		Message* getNext(){return next;}$/;"	f	class:Message	access:public	signature:()
Message::next	message.h	/^		Message *next;$/;"	m	class:Message	access:private
Message::obtain	message.h	/^		static Message* obtain();$/;"	p	class:Message	access:public	signature:()
Message::obtain	message.h	/^		static Message* obtain(const char* m);$/;"	p	class:Message	access:public	signature:(const char* m)
Message::obtain	message.h	/^		static Message* obtain(string &m);$/;"	p	class:Message	access:public	signature:(string &m)
Message::operator =	message.h	/^		Message& operator=(const Message &m){};$/;"	f	class:Message	access:private	signature:(const Message &m)
Message::setNext	message.h	/^		void setNext(Message* m){next = m;}$/;"	f	class:Message	access:public	signature:(Message* m)
Message::toString	message.h	/^		string& toString(){$/;"	f	class:Message	access:public	signature:()
Message::what	message.h	/^		string what;$/;"	m	class:Message	access:private
Message::~Message	message.h	/^		virtual ~Message(){};$/;"	f	class:Message	access:public	signature:()
MessageQueue	messagequeue.cpp	/^MessageQueue::MessageQueue():mHead(NULL),$/;"	f	class:MessageQueue	signature:()
MessageQueue	messagequeue.h	/^		MessageQueue();$/;"	p	class:MessageQueue	access:public	signature:()
MessageQueue	messagequeue.h	/^class MessageQueue : public Object$/;"	c	inherits:Object
MessageQueue::MessageQueue	messagequeue.cpp	/^MessageQueue::MessageQueue():mHead(NULL),$/;"	f	class:MessageQueue	signature:()
MessageQueue::MessageQueue	messagequeue.h	/^		MessageQueue();$/;"	p	class:MessageQueue	access:public	signature:()
MessageQueue::getLength	messagequeue.h	/^		int getLength(){return mLength;}$/;"	f	class:MessageQueue	access:public	signature:()
MessageQueue::getMessage	messagequeue.cpp	/^Message* MessageQueue::getMessage()$/;"	f	class:MessageQueue	signature:()
MessageQueue::getMessage	messagequeue.h	/^		Message* getMessage();$/;"	p	class:MessageQueue	access:public	signature:()
MessageQueue::loopHandleMessage	messagequeue.cpp	/^void MessageQueue::loopHandleMessage()$/;"	f	class:MessageQueue	signature:()
MessageQueue::loopHandleMessage	messagequeue.h	/^		void loopHandleMessage();$/;"	p	class:MessageQueue	access:public	signature:()
MessageQueue::mHead	messagequeue.h	/^		Message *mHead;$/;"	m	class:MessageQueue	access:private
MessageQueue::mLength	messagequeue.h	/^		size_t mLength;$/;"	m	class:MessageQueue	access:private
MessageQueue::mMutex	messagequeue.h	/^		mutex  mMutex;$/;"	m	class:MessageQueue	access:private
MessageQueue::mStart	messagequeue.h	/^		bool mStart;$/;"	m	class:MessageQueue	access:private
MessageQueue::mTail	messagequeue.h	/^		Message *mTail;$/;"	m	class:MessageQueue	access:private
MessageQueue::mutex	messagequeue.h	/^	typedef pthread_mutex_t mutex;$/;"	t	class:MessageQueue	access:private
MessageQueue::postMessage	messagequeue.cpp	/^void MessageQueue::postMessage(Message* m)$/;"	f	class:MessageQueue	signature:(Message* m)
MessageQueue::postMessage	messagequeue.h	/^		void postMessage(Message* m);$/;"	p	class:MessageQueue	access:public	signature:(Message* m)
MessageQueue::start	messagequeue.h	/^		void start(){mStart = true ;}$/;"	f	class:MessageQueue	access:public	signature:()
MessageQueue::test	messagequeue.cpp	/^void MessageQueue::test()$/;"	f	class:MessageQueue	signature:()
MessageQueue::test	messagequeue.h	/^		static void test();$/;"	p	class:MessageQueue	access:public	signature:()
MessageQueue::~MessageQueue	messagequeue.cpp	/^MessageQueue::~MessageQueue()$/;"	f	class:MessageQueue	signature:()
MessageQueue::~MessageQueue	messagequeue.h	/^		~MessageQueue();$/;"	p	class:MessageQueue	access:public	signature:()
NETWORK_EVENT_DRIVER	neteventdriver.h	2;"	d
NET_EVENT_	netevent.h	2;"	d
NetEventDriver	neteventdriver.cpp	/^NetEventDriver::NetEventDriver()$/;"	f	class:net::NetEventDriver	signature:()
NetEventDriver	neteventdriver.h	/^		NetEventDriver();$/;"	p	class:net::NetEventDriver	access:private	signature:()
NetEventDriver	neteventdriver.h	/^		NetEventDriver(const NetEventDriver &T);$/;"	p	class:net::NetEventDriver	access:private	signature:(const NetEventDriver &T)
NetEventDriver	neteventdriver.h	/^class NetEventDriver : public EventDriver$/;"	c	namespace:net	inherits:EventDriver
NetReadCommond	netevent.cpp	/^NetReadCommond::NetReadCommond(Connection *con)$/;"	f	class:net::NetReadCommond	signature:(Connection *con)
NetReadCommond	netevent.h	/^		NetReadCommond(Connection *con);$/;"	p	class:net::NetReadCommond	access:public	signature:(Connection *con)
NetReadCommond	netevent.h	/^class NetReadCommond : public Commond{$/;"	c	namespace:net	inherits:Commond
NetReadQueue	netevent.h	/^		NetReadQueue() : Queue<NetReadCommond>() {}$/;"	f	class:net::NetReadQueue	access:private	signature:()
NetReadQueue	netevent.h	/^		NetReadQueue(const NetReadQueue &T);$/;"	p	class:net::NetReadQueue	access:private	signature:(const NetReadQueue &T)
NetReadQueue	netevent.h	/^class NetReadQueue : public Queue<NetReadCommond>$/;"	c	namespace:net	inherits:Queue
NetWriteCommond	netevent.cpp	/^NetWriteCommond::NetWriteCommond(Connection *con)$/;"	f	class:net::NetWriteCommond	signature:(Connection *con)
NetWriteCommond	netevent.h	/^		NetWriteCommond(Connection *con);$/;"	p	class:net::NetWriteCommond	access:public	signature:(Connection *con)
NetWriteCommond	netevent.h	/^class NetWriteCommond : public Commond$/;"	c	namespace:net	inherits:Commond
NetWriteQueue	netevent.h	/^		NetWriteQueue() : Queue<NetWriteCommond>() {}$/;"	f	class:net::NetWriteQueue	access:private	signature:()
NetWriteQueue	netevent.h	/^		NetWriteQueue(const NetWriteQueue &T);$/;"	p	class:net::NetWriteQueue	access:private	signature:(const NetWriteQueue &T)
NetWriteQueue	netevent.h	/^class NetWriteQueue : public Queue<NetWriteCommond>$/;"	c	namespace:net	inherits:Queue
OBJECT	object.h	2;"	d
OBJS	Makefile	/^OBJS = ${SRCS:%.cpp=%.o} $/;"	m
OBJS	test/Makefile	/^OBJS = ..\/auto_mutex.o ..\/clientsocket.o ..\/lock.o \\$/;"	m
Object	object.cpp	/^Object::Object()$/;"	f	class:Object	signature:()
Object	object.cpp	/^Object::Object(const Object &T)$/;"	f	class:Object	signature:(const Object &T)
Object	object.h	/^		Object();	$/;"	p	class:Object	access:public	signature:()
Object	object.h	/^		Object(const Object &T);$/;"	p	class:Object	access:public	signature:(const Object &T)
Object	object.h	/^class Object$/;"	c
Object::Object	object.cpp	/^Object::Object()$/;"	f	class:Object	signature:()
Object::Object	object.cpp	/^Object::Object(const Object &T)$/;"	f	class:Object	signature:(const Object &T)
Object::Object	object.h	/^		Object();	$/;"	p	class:Object	access:public	signature:()
Object::Object	object.h	/^		Object(const Object &T);$/;"	p	class:Object	access:public	signature:(const Object &T)
Object::condition	object.h	/^	typedef pthread_cond_t condition;$/;"	t	class:Object	access:private
Object::mCond	object.h	/^		condition mCond;$/;"	m	class:Object	access:private
Object::mMutexCond	object.h	/^		mutex mMutexCond;$/;"	m	class:Object	access:private
Object::mutex	object.h	/^	typedef pthread_mutex_t mutex;$/;"	t	class:Object	access:private
Object::notify	object.cpp	/^void Object::notify()$/;"	f	class:Object	signature:()
Object::notify	object.h	/^		void notify();$/;"	p	class:Object	access:public	signature:()
Object::notifyAll	object.cpp	/^void Object::notifyAll()$/;"	f	class:Object	signature:()
Object::notifyAll	object.h	/^		void notifyAll();$/;"	p	class:Object	access:public	signature:()
Object::operator =	object.cpp	/^Object& Object::operator=(const Object &T)$/;"	f	class:Object	signature:(const Object &T)
Object::operator =	object.h	/^		Object& operator=(const Object &T);$/;"	p	class:Object	access:public	signature:(const Object &T)
Object::toString	object.cpp	/^const char* Object::toString()$/;"	f	class:Object	signature:()
Object::toString	object.h	/^		virtual const char* toString();$/;"	p	class:Object	access:public	signature:()
Object::wait	object.cpp	/^void Object::wait()$/;"	f	class:Object	signature:()
Object::wait	object.cpp	/^void Object::wait(int sec)$/;"	f	class:Object	signature:(int sec)
Object::wait	object.h	/^		void wait();$/;"	p	class:Object	access:public	signature:()
Object::wait	object.h	/^		void wait(int sec);$/;"	p	class:Object	access:public	signature:(int sec)
Object::~Object	object.cpp	/^Object::~Object()$/;"	f	class:Object	signature:()
Object::~Object	object.h	/^		virtual ~Object();$/;"	p	class:Object	access:public	signature:()
PACKETQUEUE	packetqueue.h	2;"	d
PACKET_TRANSPORT	datatransport.h	2;"	d
Packet	packet.cpp	/^	Packet::Packet(char *addr, size_t size):buf(addr),_len(size),_pos(0),next(NULL)$/;"	f	class:net::Packet	signature:(char *addr, size_t size)
Packet	packet.cpp	/^	Packet::Packet(const MemBuffer *T)$/;"	f	class:net::Packet	signature:(const MemBuffer *T)
Packet	packet.h	/^			Packet(char* addr=NULL, size_t size=0);$/;"	p	class:net::Packet	access:public	signature:(char* addr=NULL, size_t size=0)
Packet	packet.h	/^			Packet(const MemBuffer *T);$/;"	p	class:net::Packet	access:public	signature:(const MemBuffer *T)
Packet	packet.h	/^	class Packet$/;"	c	namespace:net
PacketHeader	packet.h	/^	class PacketHeader{$/;"	c	namespace:net
PacketQueue	packetqueue.cpp	/^PacketQueue::PacketQueue()$/;"	f	class:net::PacketQueue	signature:()
PacketQueue	packetqueue.h	/^		PacketQueue();$/;"	p	class:net::PacketQueue	access:public	signature:()
PacketQueue	packetqueue.h	/^class PacketQueue : public Lock{$/;"	c	namespace:net	inherits:Lock
Queue	queue.h	/^		Queue(){$/;"	f	class:sys::Queue	access:public	signature:()
Queue	queue.h	/^class Queue : public Lock{$/;"	c	namespace:sys	inherits:Lock
READ	commond.h	/^			READ,$/;"	e	enum:sys::Commond::TYPE
REFCOUNT	refcount.h	2;"	d
RUNNABLE	runnable.h	2;"	d
ReleaseInstance	mempool.h	/^			static void ReleaseInstance(){$/;"	f	class:Mempool	access:public	signature:()
Runnable	runnable.h	/^class Runnable$/;"	c
Runnable::run	runnable.h	/^		virtual void run()=0;$/;"	p	class:Runnable	access:public	signature:()
SERVERSOCKET	serversocket.h	2;"	d
SERVER_NAME	Makefile	/^SERVER_NAME = server$/;"	m
SOCKET	socket.h	5;"	d
SRCS	Makefile	/^SRCS = $(wildcard *.cpp)  $/;"	m
STATUS	status.h	2;"	d
SUBDIRS	Makefile	/^SUBDIRS := .\/test$/;"	m
ServerSocket	serversocket.cpp	/^ServerSocket::ServerSocket():Socket(),hostname(NULL)$/;"	f	class:net::ServerSocket	signature:()
ServerSocket	serversocket.h	/^		ServerSocket();$/;"	p	class:net::ServerSocket	access:public	signature:()
ServerSocket	serversocket.h	/^		ServerSocket(const ServerSocket &T);$/;"	p	class:net::ServerSocket	access:private	signature:(const ServerSocket &T)
ServerSocket	serversocket.h	/^class ServerSocket : public Socket$/;"	c	namespace:net	inherits:Socket
Socket	socket.cpp	/^Socket::Socket(int fd):sock_fd(fd)$/;"	f	class:net::Socket	signature:(int fd)
Socket	socket.h	/^		Socket(int fd=-1);$/;"	p	class:net::Socket	access:public	signature:(int fd=-1)
Socket	socket.h	/^class Socket$/;"	c	namespace:net
SocketStream	socketstream.cpp	/^SocketStream::SocketStream(Socket *soc):_socket(soc)$/;"	f	class:net::SocketStream	signature:(Socket *soc)
SocketStream	socketstream.h	/^			SocketStream(Socket *soc);$/;"	p	class:net::SocketStream	access:public	signature:(Socket *soc)
SocketStream	socketstream.h	/^	class SocketStream{$/;"	c	namespace:net
StrongRef	refcount.cpp	/^StrongRef::StrongRef()$/;"	f	class:StrongRef	signature:()
StrongRef	refcount.h	/^		StrongRef();	$/;"	p	class:StrongRef	access:public	signature:()
StrongRef	refcount.h	/^class StrongRef$/;"	c
StrongRef::StrongRef	refcount.cpp	/^StrongRef::StrongRef()$/;"	f	class:StrongRef	signature:()
StrongRef::StrongRef	refcount.h	/^		StrongRef();	$/;"	p	class:StrongRef	access:public	signature:()
StrongRef::decrease	refcount.cpp	/^void StrongRef::decrease()$/;"	f	class:StrongRef	signature:()
StrongRef::decrease	refcount.h	/^		void decrease();$/;"	p	class:StrongRef	access:public	signature:()
StrongRef::finalize	refcount.h	/^		virtual void finalize(){}$/;"	f	class:StrongRef	access:public	signature:()
StrongRef::increase	refcount.cpp	/^void StrongRef::increase()$/;"	f	class:StrongRef	signature:()
StrongRef::increase	refcount.h	/^		void increase();$/;"	p	class:StrongRef	access:public	signature:()
StrongRef::ref	refcount.h	/^		atomic_t ref;$/;"	m	class:StrongRef	access:private
StrongRef::~StrongRef	refcount.cpp	/^StrongRef::~StrongRef()$/;"	f	class:StrongRef	signature:()
StrongRef::~StrongRef	refcount.h	/^		virtual ~StrongRef();$/;"	p	class:StrongRef	access:public	signature:()
TARGET	Makefile	/^TARGET = $(SERVER_NAME) $/;"	m
TASK_QUEUE_THREAD_	taskqueuethread.h	2;"	d
TBSYS_ATOMIC_H	atomic.h	37;"	d
TEMPLATE	mempool.h	11;"	d
TESTOBJS	test/Makefile	/^TESTOBJS = \\$/;"	m
TESTS	test/Makefile	/^TESTS=${TESTOBJS:%.o=%test}$/;"	m
TESTSRC	test/Makefile	/^TESTSRC=${TESTOBJS:%.o=%.cpp}$/;"	m
THREAD	thread.h	2;"	d
TOPDIR	test/Makefile	/^TOPDIR =  $(shell pwd)$/;"	m
TYPE	commond.h	/^		enum TYPE{$/;"	g	class:sys::Commond	access:public
TaskQueueThread	taskqueuethread.cpp	/^TaskQueueThread::TaskQueueThread(CommondQueue *queue) : mQueue(queue) $/;"	f	class:sys::TaskQueueThread	signature:(CommondQueue *queue)
TaskQueueThread	taskqueuethread.h	/^		TaskQueueThread(CommondQueue *queue);$/;"	p	class:sys::TaskQueueThread	access:public	signature:(CommondQueue *queue)
TaskQueueThread	taskqueuethread.h	/^		TaskQueueThread(const TaskQueueThread &T);$/;"	p	class:sys::TaskQueueThread	access:private	signature:(const TaskQueueThread &T)
TaskQueueThread	taskqueuethread.h	/^class TaskQueueThread : public Thread , virtual public Object$/;"	c	namespace:sys	inherits:Thread,Object
TcpSocketEvent	tcpsocketevent.cpp	/^TcpSocketEvent::TcpSocketEvent(int fd, uint32_t eventtype , Connection *con)$/;"	f	class:net::TcpSocketEvent	signature:(int fd, uint32_t eventtype , Connection *con)
TcpSocketEvent	tcpsocketevent.h	/^		TcpSocketEvent(const TcpSocketEvent &T);$/;"	p	class:net::TcpSocketEvent	access:private	signature:(const TcpSocketEvent &T)
TcpSocketEvent	tcpsocketevent.h	/^		TcpSocketEvent(int fd, uint32_t eventtype= EPOLLIN | EPOLLOUT |EPOLLRDHUP, Connection *con=NULL);$/;"	p	class:net::TcpSocketEvent	access:public	signature:(int fd, uint32_t eventtype= EPOLLIN | EPOLLOUT |EPOLLRDHUP, Connection *con=NULL)
TcpSocketEvent	tcpsocketevent.h	/^class TcpSocketEvent : public EventDescripter$/;"	c	namespace:net	inherits:EventDescripter
TcpSocketQueue	tcpsocketevent.cpp	/^TcpSocketQueue::TcpSocketQueue():$/;"	f	class:net::TcpSocketQueue	signature:()
TcpSocketQueue	tcpsocketevent.h	/^		TcpSocketQueue();$/;"	p	class:net::TcpSocketQueue	access:private	signature:()
TcpSocketQueue	tcpsocketevent.h	/^		TcpSocketQueue(const TcpSocketQueue &T);$/;"	p	class:net::TcpSocketQueue	access:private	signature:(const TcpSocketQueue &T)
TcpSocketQueue	tcpsocketevent.h	/^class TcpSocketQueue$/;"	c	namespace:net
Thread	thread.cpp	/^Thread::Thread():mStop(true)$/;"	f	class:sys::Thread	signature:()
Thread	thread.h	/^		Thread();$/;"	p	class:sys::Thread	access:public	signature:()
Thread	thread.h	/^		Thread(const Thread&);$/;"	p	class:sys::Thread	access:private	signature:(const Thread&)
Thread	thread.h	/^class Thread : public Runnable{$/;"	c	namespace:sys	inherits:Runnable
Transport	datatransport.cpp	/^Transport::Transport()$/;"	f	class:net::Transport	signature:()
Transport	datatransport.h	/^		Transport();$/;"	p	class:net::Transport	access:private	signature:()
Transport	datatransport.h	/^		Transport(const Transport &T);$/;"	p	class:net::Transport	access:private	signature:(const Transport &T)
Transport	datatransport.h	/^class Transport{$/;"	c	namespace:net
WARN	logger.h	17;"	d
WRITE	commond.h	/^			WRITE,$/;"	e	enum:sys::Commond::TYPE
_BASE_PACKET__	packet.h	2;"	d
_CONNECTION_	connection.h	2;"	d
_CONNECTION_MANAGER	connectionmanager.h	2;"	d
_SOCKET_STREAM__	socketstream.h	2;"	d
__anon1::counter	atomic.h	/^typedef struct { volatile int counter; } atomic_t;$/;"	m	struct:__anon1	access:public
_addr	connection.h	/^		struct sockaddr _addr;$/;"	m	class:net::Connection	typeref:struct:net::Connection::sockaddr	access:private
_addr_len	connection.h	/^		size_t _addr_len;$/;"	m	class:net::Connection	access:private
_buf	logger.h	/^		unsigned char* _buf;$/;"	m	class:sys::LoggerBuffer	access:public
_buffer_in	socketstream.h	/^			char _buffer_in[16];$/;"	m	class:net::SocketStream	access:private
_buffer_out	socketstream.h	/^			char _buffer_out[16];$/;"	m	class:net::SocketStream	access:private
_con	netevent.h	/^		Connection *_con = NULL;$/;"	m	class:net::NetReadCommond	access:private
_con	netevent.h	/^		Connection *_con = NULL;$/;"	m	class:net::NetWriteCommond	access:private
_con	tcpsocketevent.h	/^		Connection *_con = NULL;$/;"	m	class:net::TcpSocketEvent	access:private
_conhashtable	connectionmanager.h	/^		HashCollection _conhashtable;$/;"	m	class:net::ConnectionManager	access:private
_conlist	connectionmanager.h	/^		ListCollection _conlist;$/;"	m	class:net::ConnectionManager	access:private
_cur	logger.h	/^		class LoggerBuffer *_cur;$/;"	m	class:sys::Logger	typeref:class:sys::Logger::LoggerBuffer	access:private
_cur_in	socketstream.h	/^			Packet *_cur_in = NULL;$/;"	m	class:net::SocketStream	access:private
_cur_out	socketstream.h	/^			Packet *_cur_out = NULL;$/;"	m	class:net::SocketStream	access:private
_data_len	packet.h	/^			size_t _data_len;$/;"	m	class:net::PacketHeader	access:public
_err	connection.h	/^		bool _err = false;$/;"	m	class:net::Connection	access:public
_err	tcpsocketevent.h	/^		bool _err = false;$/;"	m	class:net::TcpSocketEvent	access:private
_fd	connection.h	/^		int _fd;$/;"	m	class:net::Connection	access:private
_fileID	logger.h	/^		int _fileID;$/;"	m	class:sys::Logger	access:private
_head	listensocketevent.h	/^		ListenEvent *_head;$/;"	m	class:net::ListenEventQueue	access:private
_head	packet.h	/^			PacketHeader _head;$/;"	m	class:net::Packet	access:public
_head	tcpsocketevent.h	/^		TcpSocketEvent *_head;$/;"	m	class:net::TcpSocketQueue	access:private
_headready	packet.h	/^			bool _headready = false;$/;"	m	class:net::Packet	access:public
_in	connection.h	/^		PacketQueue *_in = NULL; $/;"	m	class:net::Connection	access:private
_len	listensocketevent.h	/^		int _len;$/;"	m	class:net::ListenEventQueue	access:private
_len	packet.h	/^			size_t _len;$/;"	m	class:net::Packet	access:private
_len	tcpsocketevent.h	/^		int _len;$/;"	m	class:net::TcpSocketQueue	access:private
_logbuf1	logger.h	/^		class LoggerBuffer _logbuf1;$/;"	m	class:sys::Logger	typeref:class:sys::Logger::LoggerBuffer	access:private
_logbuf2	logger.h	/^		class LoggerBuffer _logbuf2;$/;"	m	class:sys::Logger	typeref:class:sys::Logger::LoggerBuffer	access:private
_logfile	logger.h	/^		char *_logfile;$/;"	m	class:sys::Logger	access:private
_needclose	connection.h	/^		bool _needclose = false;		$/;"	m	class:net::Connection	access:public
_needclose	tcpsocketevent.h	/^		bool _needclose = false;$/;"	m	class:net::TcpSocketEvent	access:private
_out	connection.h	/^		PacketQueue *_out = NULL;$/;"	m	class:net::Connection	access:private
_pos	logger.h	/^		size_t _pos;$/;"	m	class:sys::LoggerBuffer	access:public
_pos	packet.h	/^			size_t _pos;			$/;"	m	class:net::Packet	access:private
_pos_in	socketstream.h	/^			size_t _pos_in = 0;$/;"	m	class:net::SocketStream	access:private
_pos_out	socketstream.h	/^			size_t _pos_out = 0;$/;"	m	class:net::SocketStream	access:private
_size	logger.h	/^		size_t _size;$/;"	m	class:sys::LoggerBuffer	access:public
_size_in	socketstream.h	/^			size_t _size_in = sizeof(class PacketHeader);$/;"	m	class:net::SocketStream	access:private
_size_out	socketstream.h	/^			size_t _size_out = sizeof(class PacketHeader);$/;"	m	class:net::SocketStream	access:private
_socket	connection.h	/^		class Socket *_socket;$/;"	m	class:net::Connection	typeref:class:net::Connection::Socket	access:private
_socket	socketstream.h	/^			Socket *_socket;$/;"	m	class:net::SocketStream	access:private
_start	logger.h	/^		size_t _start;$/;"	m	class:sys::LoggerBuffer	access:public
_streamer	connection.h	/^		class SocketStream *_streamer;				$/;"	m	class:net::Connection	typeref:class:net::Connection::SocketStream	access:private
_tail	listensocketevent.h	/^		ListenEvent *_tail;$/;"	m	class:net::ListenEventQueue	access:private
_tail	tcpsocketevent.h	/^		TcpSocketEvent *_tail;$/;"	m	class:net::TcpSocketQueue	access:private
_type	commond.h	/^		TYPE _type ;$/;"	m	class:sys::Commond	access:private
_writeable	connection.h	/^		bool _writeable = false;$/;"	m	class:net::Connection	access:public
add	listensocketevent.cpp	/^void ListenEventQueue::add(ListenEvent *T)$/;"	f	class:net::ListenEventQueue	signature:(ListenEvent *T)
add	listensocketevent.h	/^		void add(ListenEvent *T);$/;"	p	class:net::ListenEventQueue	access:public	signature:(ListenEvent *T)
add	tcpsocketevent.cpp	/^void TcpSocketQueue::add(TcpSocketEvent *T)$/;"	f	class:net::TcpSocketQueue	signature:(TcpSocketEvent *T)
add	tcpsocketevent.h	/^		void add(TcpSocketEvent *T);$/;"	p	class:net::TcpSocketQueue	access:public	signature:(TcpSocketEvent *T)
addBack	packetqueue.cpp	/^void PacketQueue::addBack(Packet *p)$/;"	f	class:net::PacketQueue	signature:(Packet *p)
addBack	packetqueue.h	/^		void addBack(class Packet *p);$/;"	p	class:net::PacketQueue	access:public	signature:(class Packet *p)
addBack	queue.h	/^		void addBack(T *p)$/;"	f	class:sys::Queue	access:public	signature:(T *p)
addConnection	connectionmanager.cpp	/^void ConnectionManager::addConnection(Connection *con)$/;"	f	class:net::ConnectionManager	signature:(Connection *con)
addConnection	connectionmanager.h	/^		void addConnection(Connection *con);$/;"	p	class:net::ConnectionManager	access:public	signature:(Connection *con)
addEventDescripter	event_driver.cpp	/^bool EventDriver::addEventDescripter(EventDescripter *eventdesc)$/;"	f	class:EventDriver	signature:(EventDescripter *eventdesc)
addEventDescripter	event_driver.h	/^		virtual bool addEventDescripter(EventDescripter *eventdesc);$/;"	p	class:EventDriver	access:public	signature:(EventDescripter *eventdesc)
addFront	packetqueue.cpp	/^void PacketQueue::addFront(Packet *p)$/;"	f	class:net::PacketQueue	signature:(Packet *p)
addFront	packetqueue.h	/^		void addFront(class Packet *p);$/;"	p	class:net::PacketQueue	access:public	signature:(class Packet *p)
addFront	queue.h	/^		void addFront(T *p)$/;"	f	class:sys::Queue	access:public	signature:(T *p)
alloc	mempool.h	/^		void* alloc();$/;"	p	class:Mempool	access:public	signature:()
alloc	mempool.h	/^void* Mempool<T, EXPANSION_SIZE>::alloc()$/;"	f	class:Mempool	signature:()
allocMem	packet.cpp	/^	void Packet::allocMem(size_t size)$/;"	f	class:net::Packet	signature:(size_t size)
allocMem	packet.h	/^			void allocMem(size_t size);$/;"	p	class:net::Packet	access:public	signature:(size_t size)
allocMemBuffer	memblock.cpp	/^bool MemBlock::allocMemBuffer(MemBuffer &T,size_t need)$/;"	f	class:MemBlock	signature:(MemBuffer &T,size_t need)
allocMemBuffer	memblock.h	/^		bool allocMemBuffer(MemBuffer &T, size_t need);$/;"	p	class:MemBlock	access:public	signature:(MemBuffer &T, size_t need)
append	logger.cpp	/^bool LoggerBuffer::append(const char*level, const char *info, size_t size)$/;"	f	class:sys::LoggerBuffer	signature:(const char*level, const char *info, size_t size)
append	logger.h	/^		bool append(const char *level,const char* info, size_t size);	$/;"	p	class:sys::LoggerBuffer	access:public	signature:(const char *level,const char* info, size_t size)
append	membuffer.cpp	/^bool MemBuffer::append(MemBuffer &T)$/;"	f	class:MemBuffer	signature:(MemBuffer &T)
append	membuffer.cpp	/^bool MemBuffer::append(const char* data, size_t size)$/;"	f	class:MemBuffer	signature:(const char* data, size_t size)
append	membuffer.h	/^		inline bool append(MemBuffer &T);$/;"	p	class:MemBuffer	access:public	signature:(MemBuffer &T)
append	membuffer.h	/^		inline bool append(const char*data, size_t size);$/;"	p	class:MemBuffer	access:public	signature:(const char*data, size_t size)
appendLine	logger.cpp	/^bool Logger::appendLine(const char* level,const char *line)$/;"	f	class:sys::Logger	signature:(const char* level,const char *line)
appendLine	logger.h	/^		bool appendLine(const char *level=DEBUG,const char *line=CONTENT);$/;"	p	class:sys::Logger	access:public	signature:(const char *level=DEBUG,const char *line=CONTENT)
atomic_add	atomic.h	/^static __inline__ void atomic_add(int i, atomic_t *v)$/;"	f	signature:(int i, atomic_t *v)
atomic_add_negative	atomic.h	/^static __inline__ int atomic_add_negative(int i, atomic_t *v)$/;"	f	signature:(int i, atomic_t *v)
atomic_add_return	atomic.h	/^static __inline__ int atomic_add_return(int i, atomic_t *v)$/;"	f	signature:(int i, atomic_t *v)
atomic_clear_mask	atomic.h	235;"	d
atomic_dec	atomic.h	/^static __inline__ void atomic_dec(atomic_t *v)$/;"	f	signature:(atomic_t *v)
atomic_dec_and_test	atomic.h	/^static __inline__ int atomic_dec_and_test(atomic_t *v)$/;"	f	signature:(atomic_t *v)
atomic_dec_return	atomic.h	244;"	d
atomic_inc	atomic.h	/^static __inline__ void atomic_inc(atomic_t *v)$/;"	f	signature:(atomic_t *v)
atomic_inc_and_test	atomic.h	/^static __inline__ int atomic_inc_and_test(atomic_t *v)$/;"	f	signature:(atomic_t *v)
atomic_inc_return	atomic.h	243;"	d
atomic_read	atomic.h	61;"	d
atomic_set	atomic.h	70;"	d
atomic_set_mask	atomic.h	239;"	d
atomic_sub	atomic.h	/^static __inline__ void atomic_sub(int i, atomic_t *v)$/;"	f	signature:(int i, atomic_t *v)
atomic_sub_and_test	atomic.h	/^static __inline__ int atomic_sub_and_test(int i, atomic_t *v)$/;"	f	signature:(int i, atomic_t *v)
atomic_sub_return	atomic.h	/^static __inline__ int atomic_sub_return(int i, atomic_t *v)$/;"	f	signature:(int i, atomic_t *v)
atomic_t	atomic.h	/^typedef struct { volatile int counter; } atomic_t;$/;"	t	typeref:struct:__anon1
buf	packet.h	/^			char *buf;$/;"	m	class:net::Packet	access:private
buffer	memblock.h	/^		char* buffer;$/;"	m	class:MemBlock	access:private
bufsize	memblock.h	/^		size_t bufsize;$/;"	m	class:MemBlock	access:private
clear	message.h	/^		static void clear(Message *m){ delete m;}$/;"	f	class:Message	access:public	signature:(Message *m)
closeSocket	socket.cpp	/^bool Socket::closeSocket()$/;"	f	class:net::Socket	signature:()
closeSocket	socket.h	/^		bool closeSocket();$/;"	p	class:net::Socket	access:public	signature:()
condition	object.h	/^	typedef pthread_cond_t condition;$/;"	t	class:Object	access:private
contains	memblock.cpp	/^bool MemBlock::contains(const MemBuffer& T){$/;"	f	class:MemBlock	signature:(const MemBuffer& T)
contains	memblock.h	/^		inline bool contains(const MemBuffer &T);$/;"	p	class:MemBlock	access:private	signature:(const MemBuffer &T)
copyFromBuffer	membuffer.cpp	/^bool MemBuffer::copyFromBuffer(MemBuffer &T)$/;"	f	class:MemBuffer	signature:(MemBuffer &T)
copyFromBuffer	membuffer.cpp	/^bool MemBuffer::copyFromBuffer(char *data, size_t size)$/;"	f	class:MemBuffer	signature:(char *data, size_t size)
copyFromBuffer	membuffer.h	/^		inline bool copyFromBuffer(MemBuffer &T);$/;"	p	class:MemBuffer	access:public	signature:(MemBuffer &T)
copyFromBuffer	membuffer.h	/^		inline bool copyFromBuffer(char* data, size_t size);$/;"	p	class:MemBuffer	access:public	signature:(char* data, size_t size)
copyToBuffer	membuffer.cpp	/^bool MemBuffer::copyToBuffer(const MemBuffer& T)$/;"	f	class:MemBuffer	signature:(const MemBuffer& T)
copyToBuffer	membuffer.cpp	/^bool MemBuffer::copyToBuffer(const char* data, size_t size)$/;"	f	class:MemBuffer	signature:(const char* data, size_t size)
copyToBuffer	membuffer.h	/^		inline bool copyToBuffer(const MemBuffer &T);$/;"	p	class:MemBuffer	access:public	signature:(const MemBuffer &T)
copyToBuffer	membuffer.h	/^		inline bool copyToBuffer(const char* data, size_t size);$/;"	p	class:MemBuffer	access:public	signature:(const char* data, size_t size)
counter	atomic.h	/^typedef struct { volatile int counter; } atomic_t;$/;"	m	struct:__anon1	access:public
createByAddr	clientsocket.cpp	/^bool ClientSocket::createByAddr(const char* addr, const int port)$/;"	f	class:net::ClientSocket	signature:(const char* addr, const int port)
createByAddr	clientsocket.h	/^		bool createByAddr(const char* addr, const int port);$/;"	p	class:net::ClientSocket	access:public	signature:(const char* addr, const int port)
createSocket	socket.cpp	/^bool Socket::createSocket(int family, int type, int protocol)$/;"	f	class:net::Socket	signature:(int family, int type, int protocol)
createSocket	socket.h	/^		bool createSocket(int family, int type, int protocol);$/;"	p	class:net::Socket	access:public	signature:(int family, int type, int protocol)
createSocketAndListen	serversocket.cpp	/^bool ServerSocket::createSocketAndListen(const int port, int blacklog)$/;"	f	class:net::ServerSocket	signature:(const int port, int blacklog)
createSocketAndListen	serversocket.h	/^		bool createSocketAndListen(const int port, int backlog = 1024);$/;"	p	class:net::ServerSocket	access:public	signature:(const int port, int backlog = 1024)
cur	memblockpool.h	/^		MemBlock* cur;$/;"	m	class:MemBlockPool	access:private
d	logger.h	/^		static void d(const char *line){$/;"	f	class:sys::Logger	access:public	signature:(const char *line)
decrease	refcount.cpp	/^void StrongRef::decrease()$/;"	f	class:StrongRef	signature:()
decrease	refcount.h	/^		void decrease();$/;"	p	class:StrongRef	access:public	signature:()
disableNoDelay	socket.cpp	/^bool Socket::disableNoDelay()$/;"	f	class:net::Socket	signature:()
disableNoDelay	socket.h	/^		bool disableNoDelay();$/;"	p	class:net::Socket	access:public	signature:()
dispatchEvent	event_driver.h	/^		virtual void dispatchEvent(struct epoll_event &activeEvent)=0;$/;"	p	class:EventDriver	access:public	signature:(struct epoll_event &activeEvent)
dispatchEvent	neteventdriver.cpp	/^void NetEventDriver::dispatchEvent(struct epoll_event &activeEvent)$/;"	f	class:net::NetEventDriver	signature:(struct epoll_event &activeEvent)
dispatchEvent	neteventdriver.h	/^		virtual void dispatchEvent(struct epoll_event &activeEvent);$/;"	p	class:net::NetEventDriver	access:public	signature:(struct epoll_event &activeEvent)
e	logger.h	/^		static void e(const char *line){$/;"	f	class:sys::Logger	access:public	signature:(const char *line)
enableNoDelay	socket.cpp	/^bool Socket::enableNoDelay()$/;"	f	class:net::Socket	signature:()
enableNoDelay	socket.h	/^		bool enableNoDelay();$/;"	p	class:net::Socket	access:public	signature:()
epollfd	event_driver.h	/^		int epollfd;$/;"	m	class:EventDriver	access:private
errThread	datatransport.cpp	/^TaskQueueThread Transport::errThread;$/;"	m	class:net::Transport	file:
errThread	datatransport.h	/^		static TaskQueueThread errThread;$/;"	m	class:net::Transport	access:private
errThreadInstance	datatransport.h	/^		static TaskQueueThread *errThreadInstance(){$/;"	f	class:net::Transport	access:public	signature:()
ev	event_driver.h	/^		struct epoll_event ev;	$/;"	m	class:EventDriver	typeref:struct:EventDriver::epoll_event	access:private
event	event_driver.h	/^		struct epoll_event event;$/;"	m	class:EventDescripter	typeref:struct:EventDescripter::epoll_event	access:private
eventHandler	event_driver.h	/^		virtual void eventHandler(struct epoll_event &ev)=0;$/;"	p	class:EventDescripter	access:public	signature:(struct epoll_event &ev)
eventHandler	listensocketevent.cpp	/^void ListenEvent::eventHandler(struct epoll_event &ev)$/;"	f	class:net::ListenEvent	signature:(struct epoll_event &ev)
eventHandler	listensocketevent.h	/^		virtual void eventHandler(struct epoll_event &ev);$/;"	p	class:net::ListenEvent	access:public	signature:(struct epoll_event &ev)
eventHandler	tcpsocketevent.cpp	/^void TcpSocketEvent::eventHandler(struct epoll_event &ev)$/;"	f	class:net::TcpSocketEvent	signature:(struct epoll_event &ev)
eventHandler	tcpsocketevent.h	/^		virtual void eventHandler(struct epoll_event &ev);$/;"	p	class:net::TcpSocketEvent	access:public	signature:(struct epoll_event &ev)
eventbuffer	event_driver.h	/^		struct epoll_event *eventbuffer;$/;"	m	class:EventDriver	typeref:struct:EventDriver::epoll_event	access:private
expand	mempool.h	/^		void expand(size_t size = EXPANSION_SIZE);$/;"	p	class:Mempool	access:private	signature:(size_t size = EXPANSION_SIZE)
expand	mempool.h	/^void Mempool<T, EXPANSION_SIZE>::expand(size_t size)$/;"	f	class:Mempool	signature:(size_t size)
expandMemBlock	memblockpool.cpp	/^bool MemBlockPool::expandMemBlock()$/;"	f	class:MemBlockPool	signature:()
expandMemBlock	memblockpool.h	/^		bool expandMemBlock();$/;"	p	class:MemBlockPool	access:public	signature:()
fd	event_driver.h	/^		int fd;$/;"	m	class:EventDescripter	access:private
finalize	memblock.cpp	/^void MemBlock::finalize()$/;"	f	class:MemBlock	signature:()
finalize	memblock.h	/^		void finalize();$/;"	p	class:MemBlock	access:public	signature:()
finalize	refcount.h	/^		virtual void finalize(){}$/;"	f	class:StrongRef	access:public	signature:()
find	listensocketevent.cpp	/^ListenEvent* ListenEventQueue::find(int fd)$/;"	f	class:net::ListenEventQueue	signature:(int fd)
find	listensocketevent.h	/^		ListenEvent *find(int fd);$/;"	p	class:net::ListenEventQueue	access:public	signature:(int fd)
find	tcpsocketevent.cpp	/^TcpSocketEvent* TcpSocketQueue::find(int fd)$/;"	f	class:net::TcpSocketQueue	signature:(int fd)
find	tcpsocketevent.h	/^		TcpSocketEvent* find(int fd);$/;"	p	class:net::TcpSocketQueue	access:public	signature:(int fd)
findConByKey	connectionmanager.cpp	/^Connection* ConnectionManager::findConByKey(int fd)$/;"	f	class:net::ConnectionManager	signature:(int fd)
findConByKey	connectionmanager.h	/^		Connection *findConByKey(int fd);$/;"	p	class:net::ConnectionManager	access:public	signature:(int fd)
flushToFile	logger.cpp	/^void Logger::flushToFile(LoggerBuffer *cur, bool newfile)$/;"	f	class:sys::Logger	signature:(LoggerBuffer *cur, bool newfile)
flushToFile	logger.h	/^		void flushToFile(LoggerBuffer *cur, bool newfile=false);$/;"	p	class:sys::Logger	access:private	signature:(LoggerBuffer *cur, bool newfile=false)
forceFlush	logger.cpp	/^bool Logger::forceFlush(bool newfile)$/;"	f	class:sys::Logger	signature:(bool newfile)
forceFlush	logger.h	/^		bool forceFlush(bool newfile=false);$/;"	p	class:sys::Logger	access:public	signature:(bool newfile=false)
free	mempool.h	/^		void free(void*);$/;"	p	class:Mempool	access:public	signature:(void*)
free	mempool.h	/^void Mempool<T, EXPANSION_SIZE>::free(void* p)$/;"	f	class:Mempool	signature:(void* p)
freeMemBuffer	memblock.cpp	/^void MemBlock::freeMemBuffer(MemBuffer& T)$/;"	f	class:MemBlock	signature:(MemBuffer& T)
freeMemBuffer	memblock.h	/^		void freeMemBuffer(MemBuffer& T);$/;"	p	class:MemBlock	access:public	signature:(MemBuffer& T)
freesize	memblock.h	/^		size_t pos, freesize;$/;"	m	class:MemBlock	access:private
front	listensocketevent.h	/^		ListenEvent *front(){$/;"	f	class:net::ListenEventQueue	access:public	signature:()
front	tcpsocketevent.h	/^		TcpSocketEvent* front(){$/;"	f	class:net::TcpSocketQueue	access:public	signature:()
generateLogFileName	logger.cpp	/^void Logger::generateLogFileName(bool newfile)$/;"	f	class:sys::Logger	signature:(bool newfile)
generateLogFileName	logger.h	/^		void generateLogFileName(bool newfile=false);$/;"	p	class:sys::Logger	access:private	signature:(bool newfile=false)
getBack	packetqueue.cpp	/^Packet* PacketQueue::getBack()$/;"	f	class:net::PacketQueue	signature:()
getBack	packetqueue.h	/^		class Packet* getBack();$/;"	p	class:net::PacketQueue	access:public	signature:()
getBack	queue.h	/^		T* getBack()$/;"	f	class:sys::Queue	access:public	signature:()
getConnect	clientsocket.cpp	/^Connection* ClientSocket::getConnect()$/;"	f	class:net::ClientSocket	signature:()
getConnect	clientsocket.h	/^		class Connection * getConnect();$/;"	p	class:net::ClientSocket	access:public	signature:()
getErr	connection.h	/^		bool getErr(){$/;"	f	class:net::Connection	access:public	signature:()
getEvent	event_driver.h	/^		struct epoll_event* getEvent(){$/;"	f	class:EventDescripter	access:public	signature:()
getFront	packetqueue.cpp	/^Packet* PacketQueue::getFront()$/;"	f	class:net::PacketQueue	signature:()
getFront	packetqueue.h	/^		class Packet* getFront();$/;"	p	class:net::PacketQueue	access:public	signature:()
getFront	queue.h	/^		T* getFront()$/;"	f	class:sys::Queue	access:public	signature:()
getHandle	connection.h	/^		int getHandle(){return _fd;}$/;"	f	class:net::Connection	access:public	signature:()
getLength	memblockpool.h	/^		int getLength(){$/;"	f	class:MemBlockPool	access:public	signature:()
getLength	messagequeue.h	/^		int getLength(){return mLength;}$/;"	f	class:MessageQueue	access:public	signature:()
getMemBuffer	memblockpool.cpp	/^bool MemBlockPool::getMemBuffer(MemBuffer *T,size_t need)$/;"	f	class:MemBlockPool	signature:(MemBuffer *T,size_t need)
getMemBuffer	memblockpool.h	/^		bool getMemBuffer(MemBuffer *T,size_t need);$/;"	p	class:MemBlockPool	access:public	signature:(MemBuffer *T,size_t need)
getMessage	messagequeue.cpp	/^Message* MessageQueue::getMessage()$/;"	f	class:MessageQueue	signature:()
getMessage	messagequeue.h	/^		Message* getMessage();$/;"	p	class:MessageQueue	access:public	signature:()
getNeedClose	connection.h	/^		bool getNeedClose(){$/;"	f	class:net::Connection	access:public	signature:()
getNext	listensocketevent.h	/^		ListenEvent* getNext(){$/;"	f	class:net::ListenEvent	access:public	signature:()
getNext	message.h	/^		Message* getNext(){return next;}$/;"	f	class:Message	access:public	signature:()
getNext	tcpsocketevent.h	/^		TcpSocketEvent* getNext()$/;"	f	class:net::TcpSocketEvent	access:public	signature:()
getPeer	socket.cpp	/^bool Socket::getPeer(char *ip, size_t ip_len, int *port) {$/;"	f	class:net::Socket	signature:(char *ip, size_t ip_len, int *port)
getPeer	socket.h	/^		bool getPeer(char *ip, size_t ip_len, int *port);$/;"	p	class:net::Socket	access:public	signature:(char *ip, size_t ip_len, int *port)
getSockName	socket.cpp	/^bool Socket::getSockName(char *ip, size_t ip_len, int *port) {$/;"	f	class:net::Socket	signature:(char *ip, size_t ip_len, int *port)
getSockName	socket.h	/^		bool getSockName(char *ip, size_t ip_len, int *port);$/;"	p	class:net::Socket	access:public	signature:(char *ip, size_t ip_len, int *port)
getSocketHandle	socket.h	/^		int getSocketHandle(){return sock_fd;}$/;"	f	class:net::Socket	access:public	signature:()
getThreadHandle	thread.h	/^		pthread_t getThreadHandle(){$/;"	f	class:sys::Thread	access:public	signature:()
getType	commond.h	/^		TYPE getType(){$/;"	f	class:sys::Commond	access:public	signature:()
getWhat	status.h	/^		const char* getWhat()const{$/;"	f	class:status	access:public	signature:() const
getWriteable	connection.h	/^		bool getWriteable(){$/;"	f	class:net::Connection	access:public	signature:()
getfd	event_driver.h	/^		int getfd()const{$/;"	f	class:EventDescripter	access:public	signature:() const
handleConEvent	listensocketevent.cpp	/^void ListenEvent::handleConEvent(int fd)$/;"	f	class:net::ListenEvent	signature:(int fd)
handleConEvent	listensocketevent.h	/^		void handleConEvent(int fd);$/;"	p	class:net::ListenEvent	access:private	signature:(int fd)
handleConnectEvent	listensocketevent.h	/^		void handleConnectEvent();$/;"	p	class:net::ListenEvent	access:public	signature:()
handleEventLoop	event_driver.cpp	/^void EventDriver::handleEventLoop()$/;"	f	class:EventDriver	signature:()
handleEventLoop	event_driver.h	/^		void handleEventLoop();$/;"	p	class:EventDriver	access:public	signature:()
hasFreeSpace	logger.h	/^		bool hasFreeSpace(size_t need){return need<_size-_pos;}$/;"	f	class:sys::LoggerBuffer	access:public	signature:(size_t need)
hasSpace	memblock.h	/^		inline bool hasSpace(size_t need){$/;"	f	class:MemBlock	access:public	signature:(size_t need)
hostname	serversocket.h	/^		char *hostname;$/;"	m	class:net::ServerSocket	access:protected
i	logger.h	/^		static void i(const char *line){$/;"	f	class:sys::Logger	access:public	signature:(const char *line)
increase	refcount.cpp	/^void StrongRef::increase()$/;"	f	class:StrongRef	signature:()
increase	refcount.h	/^		void increase();$/;"	p	class:StrongRef	access:public	signature:()
instance	connectionmanager.cpp	/^ConnectionManager& ConnectionManager::instance()$/;"	f	class:net::ConnectionManager	signature:()
instance	connectionmanager.h	/^		static ConnectionManager& instance();$/;"	p	class:net::ConnectionManager	access:public	signature:()
instance	datatransport.h	/^		static Transport& instance(){$/;"	f	class:net::Transport	access:public	signature:()
instance	listensocketevent.h	/^		static ListenEventQueue& instance(){$/;"	f	class:net::ListenEventQueue	access:public	signature:()
instance	logger.h	/^		static Logger& instance(){$/;"	f	class:sys::Logger	access:public	signature:()
instance	memblockpool.h	/^		static MemBlockPool& instance(){$/;"	f	class:MemBlockPool	access:public	signature:()
instance	netevent.h	/^		static NetReadQueue& instance(){$/;"	f	class:net::NetReadQueue	access:public	signature:()
instance	netevent.h	/^		static NetWriteQueue& instance(){$/;"	f	class:net::NetWriteQueue	access:public	signature:()
instance	neteventdriver.h	/^		static NetEventDriver& instance(){$/;"	f	class:net::NetEventDriver	access:public	signature:()
instance	tcpsocketevent.h	/^		static TcpSocketQueue& instance(){$/;"	f	class:net::TcpSocketQueue	access:public	signature:()
isEmpty	packetqueue.cpp	/^bool PacketQueue::isEmpty()$/;"	f	class:net::PacketQueue	signature:()
isEmpty	packetqueue.h	/^		bool isEmpty();$/;"	p	class:net::PacketQueue	access:public	signature:()
isEmpty	queue.h	/^		bool isEmpty(){$/;"	f	class:sys::Queue	access:public	signature:()
isFree	membuffer.h	/^		inline bool  isFree(){$/;"	f	class:MemBuffer	access:public	signature:()
join	thread.cpp	/^void Thread::join()$/;"	f	class:sys::Thread	signature:()
join	thread.h	/^		void join();$/;"	p	class:sys::Thread	access:public	signature:()
keepLive	socket.cpp	/^int Socket::keepLive(int interval)$/;"	f	class:net::Socket	signature:(int interval)
keepLive	socket.h	/^		int keepLive(int interval=7200);$/;"	p	class:net::Socket	access:public	signature:(int interval=7200)
length	mempool.h	/^		size_t length;$/;"	m	class:Mempool	access:private
local_address	serversocket.h	/^		struct sockaddr_in  local_address;	$/;"	m	class:net::ServerSocket	typeref:struct:net::ServerSocket::sockaddr_in	access:protected
lock	lock.cpp	/^void Lock::lock()$/;"	f	class:Lock	signature:()
lock	lock.h	/^		void lock();$/;"	p	class:Lock	access:public	signature:()
logFileName	logger.cpp	/^const char* logFileName = "LOG";$/;"	m	namespace:sys	file:
loopHandleMessage	messagequeue.cpp	/^void MessageQueue::loopHandleMessage()$/;"	f	class:MessageQueue	signature:()
loopHandleMessage	messagequeue.h	/^		void loopHandleMessage();$/;"	p	class:MessageQueue	access:public	signature:()
mCond	object.h	/^		condition mCond;$/;"	m	class:Object	access:private
mData	membuffer.h	/^		char* mData;$/;"	m	class:MemBuffer	access:public
mDataBlocks	memblockpool.h	/^		Collection mDataBlocks;$/;"	m	class:MemBlockPool	access:private
mHead	messagequeue.h	/^		Message *mHead;$/;"	m	class:MessageQueue	access:private
mLength	messagequeue.h	/^		size_t mLength;$/;"	m	class:MessageQueue	access:private
mList	queue.h	/^		Collection mList;$/;"	m	class:sys::Queue	access:private
mMutex	auto_mutex.h	/^		mutex *mMutex = NULL;$/;"	m	class:AutoMutex	access:private
mMutex	lock.h	/^		mutex mMutex;$/;"	m	class:Lock	access:private
mMutex	memblockpool.h	/^		mutex mMutex;$/;"	m	class:MemBlockPool	access:private
mMutex	mempool.h	/^		static pthread_mutex_t mMutex ;$/;"	m	class:Mempool	access:private
mMutex	mempool.h	/^pthread_mutex_t Mempool<T, EXPANSION_SIZE>::mMutex = PTHREAD_MUTEX_INITIALIZER;$/;"	m	class:Mempool
mMutex	messagequeue.h	/^		mutex  mMutex;$/;"	m	class:MessageQueue	access:private
mMutexCond	object.h	/^		mutex mMutexCond;$/;"	m	class:Object	access:private
mPacketList	packetqueue.h	/^		Collection mPacketList;$/;"	m	class:net::PacketQueue	access:private
mParent	memblock.h	/^		MemBlockPool *mParent;$/;"	m	class:MemBlock	access:private
mPos	membuffer.h	/^		size_t mPos;$/;"	m	class:MemBuffer	access:public
mQueue	taskqueuethread.h	/^		CommondQueue *mQueue;$/;"	m	class:sys::TaskQueueThread	access:private
mSize	membuffer.h	/^		size_t mSize;$/;"	m	class:MemBuffer	access:public
mStart	messagequeue.h	/^		bool mStart;$/;"	m	class:MessageQueue	access:private
mStatusOK	status.h	/^		static const status mStatusOK;$/;"	m	class:status	access:private
mStop	thread.h	/^		bool mStop;$/;"	m	class:sys::Thread	access:private
mTail	messagequeue.h	/^		Message *mTail;$/;"	m	class:MessageQueue	access:private
mTid	thread.h	/^		pthread_t mTid;$/;"	m	class:sys::Thread	access:private
main	main.cpp	/^int main()$/;"	f	signature:()
main	test/logger.cpp	/^int main()$/;"	f	signature:()
main	test/main.cpp	/^int main()$/;"	f	signature:()
mempool	main.cpp	/^		static Mempool<packet> *mempool;$/;"	m	class:packet	file:	access:public
mempool	main.cpp	/^Mempool<packet> *packet::mempool = NULL;$/;"	m	class:packet	file:
merge	queue.h	/^		void merge(Queue<T*> q)$/;"	f	class:sys::Queue	access:public	signature:(Queue<T*> q)
mutex	auto_mutex.h	/^	typedef pthread_mutex_t mutex;$/;"	t	class:AutoMutex	access:private
mutex	lock.h	/^	typedef pthread_mutex_t mutex;$/;"	t	class:Lock	access:private
mutex	memblockpool.h	/^	typedef pthread_mutex_t mutex;$/;"	t	class:MemBlockPool	access:private
mutex	messagequeue.h	/^	typedef pthread_mutex_t mutex;$/;"	t	class:MessageQueue	access:private
mutex	object.h	/^	typedef pthread_mutex_t mutex;$/;"	t	class:Object	access:private
mythread	main.cpp	/^class mythread : public sys::Thread$/;"	c	file:	inherits:sys::Thread
mythread::run	main.cpp	/^	void run()$/;"	f	class:mythread	file:	access:private	signature:()
needRun	thread.h	/^		bool needRun(){$/;"	f	class:sys::Thread	access:public	signature:()
net	clientsocket.cpp	/^namespace net{$/;"	n	file:
net	clientsocket.h	/^namespace net{$/;"	n
net	connection.cpp	/^namespace net{$/;"	n	file:
net	connection.h	/^namespace net {$/;"	n
net	connectionmanager.cpp	/^namespace net{$/;"	n	file:
net	connectionmanager.h	/^namespace net{$/;"	n
net	datatransport.cpp	/^namespace net{$/;"	n	file:
net	datatransport.h	/^namespace net{$/;"	n
net	listensocketevent.cpp	/^namespace net{$/;"	n	file:
net	listensocketevent.h	/^namespace net{$/;"	n
net	netevent.cpp	/^namespace net{$/;"	n	file:
net	netevent.h	/^namespace net{$/;"	n
net	neteventdriver.cpp	/^namespace net{$/;"	n	file:
net	neteventdriver.h	/^namespace net{$/;"	n
net	packet.cpp	/^namespace net{$/;"	n	file:
net	packet.h	/^namespace net{$/;"	n
net	packetqueue.cpp	/^namespace net{$/;"	n	file:
net	packetqueue.h	/^namespace net{$/;"	n
net	serversocket.cpp	/^namespace net{$/;"	n	file:
net	serversocket.h	/^namespace net{$/;"	n
net	socket.cpp	/^namespace net{$/;"	n	file:
net	socket.h	/^namespace net{$/;"	n
net	socketstream.cpp	/^namespace net{$/;"	n	file:
net	socketstream.h	/^namespace net{$/;"	n
net	tcpsocketevent.cpp	/^namespace net{$/;"	n	file:
net	tcpsocketevent.h	/^namespace net{$/;"	n
net::ClientSocket	clientsocket.h	/^class ClientSocket : public Socket$/;"	c	namespace:net	inherits:Socket
net::ClientSocket::ClientSocket	clientsocket.cpp	/^ClientSocket::ClientSocket(): Socket()$/;"	f	class:net::ClientSocket	signature:()
net::ClientSocket::ClientSocket	clientsocket.h	/^		ClientSocket();$/;"	p	class:net::ClientSocket	access:public	signature:()
net::ClientSocket::ClientSocket	clientsocket.h	/^		ClientSocket(const ClientSocket &T);$/;"	p	class:net::ClientSocket	access:private	signature:(const ClientSocket &T)
net::ClientSocket::createByAddr	clientsocket.cpp	/^bool ClientSocket::createByAddr(const char* addr, const int port)$/;"	f	class:net::ClientSocket	signature:(const char* addr, const int port)
net::ClientSocket::createByAddr	clientsocket.h	/^		bool createByAddr(const char* addr, const int port);$/;"	p	class:net::ClientSocket	access:public	signature:(const char* addr, const int port)
net::ClientSocket::getConnect	clientsocket.cpp	/^Connection* ClientSocket::getConnect()$/;"	f	class:net::ClientSocket	signature:()
net::ClientSocket::getConnect	clientsocket.h	/^		class Connection * getConnect();$/;"	p	class:net::ClientSocket	access:public	signature:()
net::ClientSocket::operator =	clientsocket.h	/^		ClientSocket& operator=(const ClientSocket &T);$/;"	p	class:net::ClientSocket	access:private	signature:(const ClientSocket &T)
net::ClientSocket::remote_address	clientsocket.h	/^		struct sockaddr_in  remote_address;		$/;"	m	class:net::ClientSocket	typeref:struct:net::ClientSocket::sockaddr_in	access:protected
net::ClientSocket::remote_port	clientsocket.h	/^		int remote_port;$/;"	m	class:net::ClientSocket	access:protected
net::ClientSocket::~ClientSocket	clientsocket.cpp	/^ClientSocket::~ClientSocket()$/;"	f	class:net::ClientSocket	signature:()
net::ClientSocket::~ClientSocket	clientsocket.h	/^		~ClientSocket();$/;"	p	class:net::ClientSocket	access:public	signature:()
net::ConnectedSocket	socket.h	/^class ConnectedSocket : public Socket$/;"	c	namespace:net	inherits:Socket
net::ConnectedSocket::ConnectedSocket	socket.h	/^		ConnectedSocket(int sockfd){sock_fd = sockfd;}$/;"	f	class:net::ConnectedSocket	access:public	signature:(int sockfd)
net::ConnectedSocket::~ConnectedSocket	socket.h	/^		~ConnectedSocket(){::close(sock_fd);}$/;"	f	class:net::ConnectedSocket	access:public	signature:()
net::Connection	connection.h	/^class Connection{$/;"	c	namespace:net
net::Connection::Connection	connection.cpp	/^Connection::Connection(Socket* sock, sockaddr *addr, size_t addrlen) :$/;"	f	class:net::Connection	signature:(Socket* sock, sockaddr *addr, size_t addrlen)
net::Connection::Connection	connection.h	/^		Connection(Socket* sock, sockaddr *addr=NULL, size_t addrlen=0);$/;"	p	class:net::Connection	access:public	signature:(Socket* sock, sockaddr *addr=NULL, size_t addrlen=0)
net::Connection::_addr	connection.h	/^		struct sockaddr _addr;$/;"	m	class:net::Connection	typeref:struct:net::Connection::sockaddr	access:private
net::Connection::_addr_len	connection.h	/^		size_t _addr_len;$/;"	m	class:net::Connection	access:private
net::Connection::_err	connection.h	/^		bool _err = false;$/;"	m	class:net::Connection	access:public
net::Connection::_fd	connection.h	/^		int _fd;$/;"	m	class:net::Connection	access:private
net::Connection::_in	connection.h	/^		PacketQueue *_in = NULL; $/;"	m	class:net::Connection	access:private
net::Connection::_needclose	connection.h	/^		bool _needclose = false;		$/;"	m	class:net::Connection	access:public
net::Connection::_out	connection.h	/^		PacketQueue *_out = NULL;$/;"	m	class:net::Connection	access:private
net::Connection::_socket	connection.h	/^		class Socket *_socket;$/;"	m	class:net::Connection	typeref:class:net::Connection::Socket	access:private
net::Connection::_streamer	connection.h	/^		class SocketStream *_streamer;				$/;"	m	class:net::Connection	typeref:class:net::Connection::SocketStream	access:private
net::Connection::_writeable	connection.h	/^		bool _writeable = false;$/;"	m	class:net::Connection	access:public
net::Connection::getErr	connection.h	/^		bool getErr(){$/;"	f	class:net::Connection	access:public	signature:()
net::Connection::getHandle	connection.h	/^		int getHandle(){return _fd;}$/;"	f	class:net::Connection	access:public	signature:()
net::Connection::getNeedClose	connection.h	/^		bool getNeedClose(){$/;"	f	class:net::Connection	access:public	signature:()
net::Connection::getWriteable	connection.h	/^		bool getWriteable(){$/;"	f	class:net::Connection	access:public	signature:()
net::Connection::prepare	connection.cpp	/^void Connection::prepare(PacketQueue *in, PacketQueue *out)$/;"	f	class:net::Connection	signature:(PacketQueue *in, PacketQueue *out)
net::Connection::prepare	connection.h	/^		void prepare(PacketQueue *in, PacketQueue *out);$/;"	p	class:net::Connection	access:public	signature:(PacketQueue *in, PacketQueue *out)
net::Connection::readPacket	connection.cpp	/^void Connection::readPacket()$/;"	f	class:net::Connection	signature:()
net::Connection::readPacket	connection.h	/^		void readPacket();$/;"	p	class:net::Connection	access:public	signature:()
net::Connection::setAddress	connection.cpp	/^void Connection::setAddress(sockaddr *addr, size_t addrlen)$/;"	f	class:net::Connection	signature:(sockaddr *addr, size_t addrlen)
net::Connection::setAddress	connection.h	/^		void setAddress(sockaddr *addr, size_t addrlen);		$/;"	p	class:net::Connection	access:public	signature:(sockaddr *addr, size_t addrlen)
net::Connection::setErr	connection.h	/^		void setErr(bool t){$/;"	f	class:net::Connection	access:public	signature:(bool t)
net::Connection::setNeedClose	connection.h	/^		void setNeedClose(bool t){$/;"	f	class:net::Connection	access:public	signature:(bool t)
net::Connection::setWriteable	connection.h	/^		void setWriteable(bool t){$/;"	f	class:net::Connection	access:public	signature:(bool t)
net::Connection::writePacket	connection.cpp	/^void Connection::writePacket()$/;"	f	class:net::Connection	signature:()
net::Connection::writePacket	connection.h	/^		void writePacket();$/;"	p	class:net::Connection	access:public	signature:()
net::Connection::~Connection	connection.cpp	/^Connection::~Connection()$/;"	f	class:net::Connection	signature:()
net::Connection::~Connection	connection.h	/^		virtual ~Connection();$/;"	p	class:net::Connection	access:public	signature:()
net::ConnectionManager	connectionmanager.h	/^class ConnectionManager : public Lock{$/;"	c	namespace:net	inherits:Lock
net::ConnectionManager::ConnectionManager	connectionmanager.cpp	/^ConnectionManager::ConnectionManager()$/;"	f	class:net::ConnectionManager	signature:()
net::ConnectionManager::ConnectionManager	connectionmanager.h	/^		ConnectionManager();$/;"	p	class:net::ConnectionManager	access:private	signature:()
net::ConnectionManager::ConnectionManager	connectionmanager.h	/^		ConnectionManager(const ConnectionManager &T);$/;"	p	class:net::ConnectionManager	access:private	signature:(const ConnectionManager &T)
net::ConnectionManager::HashBucketSize	connectionmanager.h	/^		HashBucketSize = 1024$/;"	e	enum:net::ConnectionManager::__anon2
net::ConnectionManager::HashCollection	connectionmanager.h	/^	typedef std::unordered_map<int, class Connection*> HashCollection;$/;"	t	class:net::ConnectionManager	access:private
net::ConnectionManager::HashIter	connectionmanager.h	/^	typedef HashCollection::iterator HashIter;$/;"	t	class:net::ConnectionManager	access:private
net::ConnectionManager::ListCollection	connectionmanager.h	/^	typedef std::forward_list<class Connection*> ListCollection;$/;"	t	class:net::ConnectionManager	access:private
net::ConnectionManager::ListIter	connectionmanager.h	/^	typedef ListCollection::iterator ListIter;$/;"	t	class:net::ConnectionManager	access:private
net::ConnectionManager::_conhashtable	connectionmanager.h	/^		HashCollection _conhashtable;$/;"	m	class:net::ConnectionManager	access:private
net::ConnectionManager::_conlist	connectionmanager.h	/^		ListCollection _conlist;$/;"	m	class:net::ConnectionManager	access:private
net::ConnectionManager::addConnection	connectionmanager.cpp	/^void ConnectionManager::addConnection(Connection *con)$/;"	f	class:net::ConnectionManager	signature:(Connection *con)
net::ConnectionManager::addConnection	connectionmanager.h	/^		void addConnection(Connection *con);$/;"	p	class:net::ConnectionManager	access:public	signature:(Connection *con)
net::ConnectionManager::findConByKey	connectionmanager.cpp	/^Connection* ConnectionManager::findConByKey(int fd)$/;"	f	class:net::ConnectionManager	signature:(int fd)
net::ConnectionManager::findConByKey	connectionmanager.h	/^		Connection *findConByKey(int fd);$/;"	p	class:net::ConnectionManager	access:public	signature:(int fd)
net::ConnectionManager::instance	connectionmanager.cpp	/^ConnectionManager& ConnectionManager::instance()$/;"	f	class:net::ConnectionManager	signature:()
net::ConnectionManager::instance	connectionmanager.h	/^		static ConnectionManager& instance();$/;"	p	class:net::ConnectionManager	access:public	signature:()
net::ConnectionManager::operator =	connectionmanager.h	/^		ConnectionManager& operator=(const ConnectionManager &T);$/;"	p	class:net::ConnectionManager	access:private	signature:(const ConnectionManager &T)
net::ConnectionManager::pinstance	connectionmanager.cpp	/^ConnectionManager* ConnectionManager::pinstance()$/;"	f	class:net::ConnectionManager	signature:()
net::ConnectionManager::pinstance	connectionmanager.h	/^		static ConnectionManager* pinstance();$/;"	p	class:net::ConnectionManager	access:public	signature:()
net::ConnectionManager::removeCon	connectionmanager.cpp	/^void ConnectionManager::removeCon(Connection *con)$/;"	f	class:net::ConnectionManager	signature:(Connection *con)
net::ConnectionManager::removeCon	connectionmanager.h	/^		void removeCon(Connection *con);$/;"	p	class:net::ConnectionManager	access:public	signature:(Connection *con)
net::ConnectionManager::removeConByKey	connectionmanager.cpp	/^void ConnectionManager::removeConByKey(int fd)$/;"	f	class:net::ConnectionManager	signature:(int fd)
net::ConnectionManager::removeConByKey	connectionmanager.h	/^		void removeConByKey(int fd);$/;"	p	class:net::ConnectionManager	access:public	signature:(int fd)
net::ConnectionManager::self	connectionmanager.cpp	/^ConnectionManager* ConnectionManager::self=NULL;$/;"	m	class:net::ConnectionManager	file:
net::ConnectionManager::self	connectionmanager.h	/^		static ConnectionManager *self;$/;"	m	class:net::ConnectionManager	access:private
net::ConnectionManager::~ConnectionManager	connectionmanager.cpp	/^ConnectionManager::~ConnectionManager()$/;"	f	class:net::ConnectionManager	signature:()
net::ConnectionManager::~ConnectionManager	connectionmanager.h	/^		~ConnectionManager();$/;"	p	class:net::ConnectionManager	access:private	signature:()
net::ListenEvent	listensocketevent.h	/^class ListenEvent : public EventDescripter{$/;"	c	namespace:net	inherits:EventDescripter
net::ListenEvent::ListenEvent	listensocketevent.cpp	/^ListenEvent::ListenEvent(int fd):$/;"	f	class:net::ListenEvent	signature:(int fd)
net::ListenEvent::ListenEvent	listensocketevent.h	/^		ListenEvent(const ListenEvent &T);$/;"	p	class:net::ListenEvent	access:private	signature:(const ListenEvent &T)
net::ListenEvent::ListenEvent	listensocketevent.h	/^		ListenEvent(int fd);$/;"	p	class:net::ListenEvent	access:public	signature:(int fd)
net::ListenEvent::eventHandler	listensocketevent.cpp	/^void ListenEvent::eventHandler(struct epoll_event &ev)$/;"	f	class:net::ListenEvent	signature:(struct epoll_event &ev)
net::ListenEvent::eventHandler	listensocketevent.h	/^		virtual void eventHandler(struct epoll_event &ev);$/;"	p	class:net::ListenEvent	access:public	signature:(struct epoll_event &ev)
net::ListenEvent::getNext	listensocketevent.h	/^		ListenEvent* getNext(){$/;"	f	class:net::ListenEvent	access:public	signature:()
net::ListenEvent::handleConEvent	listensocketevent.cpp	/^void ListenEvent::handleConEvent(int fd)$/;"	f	class:net::ListenEvent	signature:(int fd)
net::ListenEvent::handleConEvent	listensocketevent.h	/^		void handleConEvent(int fd);$/;"	p	class:net::ListenEvent	access:private	signature:(int fd)
net::ListenEvent::handleConnectEvent	listensocketevent.h	/^		void handleConnectEvent();$/;"	p	class:net::ListenEvent	access:public	signature:()
net::ListenEvent::next	listensocketevent.h	/^		ListenEvent *next;$/;"	m	class:net::ListenEvent	access:private
net::ListenEvent::operator =	listensocketevent.h	/^		ListenEvent& operator=(const ListenEvent &T);$/;"	p	class:net::ListenEvent	access:private	signature:(const ListenEvent &T)
net::ListenEvent::setNext	listensocketevent.h	/^		void setNext(ListenEvent *n){$/;"	f	class:net::ListenEvent	access:public	signature:(ListenEvent *n)
net::ListenEvent::~ListenEvent	listensocketevent.cpp	/^ListenEvent::~ListenEvent()$/;"	f	class:net::ListenEvent	signature:()
net::ListenEvent::~ListenEvent	listensocketevent.h	/^		~ListenEvent();$/;"	p	class:net::ListenEvent	access:public	signature:()
net::ListenEventQueue	listensocketevent.h	/^class ListenEventQueue{$/;"	c	namespace:net
net::ListenEventQueue::ListenEventQueue	listensocketevent.cpp	/^ListenEventQueue::ListenEventQueue():$/;"	f	class:net::ListenEventQueue	signature:()
net::ListenEventQueue::ListenEventQueue	listensocketevent.h	/^		ListenEventQueue();$/;"	p	class:net::ListenEventQueue	access:private	signature:()
net::ListenEventQueue::ListenEventQueue	listensocketevent.h	/^		ListenEventQueue(const ListenEventQueue &T);$/;"	p	class:net::ListenEventQueue	access:private	signature:(const ListenEventQueue &T)
net::ListenEventQueue::_head	listensocketevent.h	/^		ListenEvent *_head;$/;"	m	class:net::ListenEventQueue	access:private
net::ListenEventQueue::_len	listensocketevent.h	/^		int _len;$/;"	m	class:net::ListenEventQueue	access:private
net::ListenEventQueue::_tail	listensocketevent.h	/^		ListenEvent *_tail;$/;"	m	class:net::ListenEventQueue	access:private
net::ListenEventQueue::add	listensocketevent.cpp	/^void ListenEventQueue::add(ListenEvent *T)$/;"	f	class:net::ListenEventQueue	signature:(ListenEvent *T)
net::ListenEventQueue::add	listensocketevent.h	/^		void add(ListenEvent *T);$/;"	p	class:net::ListenEventQueue	access:public	signature:(ListenEvent *T)
net::ListenEventQueue::find	listensocketevent.cpp	/^ListenEvent* ListenEventQueue::find(int fd)$/;"	f	class:net::ListenEventQueue	signature:(int fd)
net::ListenEventQueue::find	listensocketevent.h	/^		ListenEvent *find(int fd);$/;"	p	class:net::ListenEventQueue	access:public	signature:(int fd)
net::ListenEventQueue::front	listensocketevent.h	/^		ListenEvent *front(){$/;"	f	class:net::ListenEventQueue	access:public	signature:()
net::ListenEventQueue::instance	listensocketevent.h	/^		static ListenEventQueue& instance(){$/;"	f	class:net::ListenEventQueue	access:public	signature:()
net::ListenEventQueue::operator =	listensocketevent.h	/^		ListenEventQueue& operator=(const ListenEventQueue &T);$/;"	p	class:net::ListenEventQueue	access:private	signature:(const ListenEventQueue &T)
net::ListenEventQueue::self	listensocketevent.cpp	/^ListenEventQueue ListenEventQueue::self;$/;"	m	class:net::ListenEventQueue	file:
net::ListenEventQueue::self	listensocketevent.h	/^		static ListenEventQueue self;$/;"	m	class:net::ListenEventQueue	access:private
net::ListenEventQueue::~ListenEventQueue	listensocketevent.cpp	/^ListenEventQueue::~ListenEventQueue()$/;"	f	class:net::ListenEventQueue	signature:()
net::ListenEventQueue::~ListenEventQueue	listensocketevent.h	/^		~ListenEventQueue();$/;"	p	class:net::ListenEventQueue	access:public	signature:()
net::NetEventDriver	neteventdriver.h	/^class NetEventDriver : public EventDriver$/;"	c	namespace:net	inherits:EventDriver
net::NetEventDriver::NetEventDriver	neteventdriver.cpp	/^NetEventDriver::NetEventDriver()$/;"	f	class:net::NetEventDriver	signature:()
net::NetEventDriver::NetEventDriver	neteventdriver.h	/^		NetEventDriver();$/;"	p	class:net::NetEventDriver	access:private	signature:()
net::NetEventDriver::NetEventDriver	neteventdriver.h	/^		NetEventDriver(const NetEventDriver &T);$/;"	p	class:net::NetEventDriver	access:private	signature:(const NetEventDriver &T)
net::NetEventDriver::dispatchEvent	neteventdriver.cpp	/^void NetEventDriver::dispatchEvent(struct epoll_event &activeEvent)$/;"	f	class:net::NetEventDriver	signature:(struct epoll_event &activeEvent)
net::NetEventDriver::dispatchEvent	neteventdriver.h	/^		virtual void dispatchEvent(struct epoll_event &activeEvent);$/;"	p	class:net::NetEventDriver	access:public	signature:(struct epoll_event &activeEvent)
net::NetEventDriver::instance	neteventdriver.h	/^		static NetEventDriver& instance(){$/;"	f	class:net::NetEventDriver	access:public	signature:()
net::NetEventDriver::operator =	neteventdriver.h	/^		NetEventDriver& operator=(const NetEventDriver &T);$/;"	p	class:net::NetEventDriver	access:private	signature:(const NetEventDriver &T)
net::NetEventDriver::self	neteventdriver.cpp	/^NetEventDriver NetEventDriver::self;$/;"	m	class:net::NetEventDriver	file:
net::NetEventDriver::self	neteventdriver.h	/^		static NetEventDriver self;$/;"	m	class:net::NetEventDriver	access:private
net::NetEventDriver::~NetEventDriver	neteventdriver.cpp	/^NetEventDriver::~NetEventDriver()$/;"	f	class:net::NetEventDriver	signature:()
net::NetEventDriver::~NetEventDriver	neteventdriver.h	/^		~NetEventDriver();$/;"	p	class:net::NetEventDriver	access:public	signature:()
net::NetReadCommond	netevent.h	/^class NetReadCommond : public Commond{$/;"	c	namespace:net	inherits:Commond
net::NetReadCommond::NetReadCommond	netevent.cpp	/^NetReadCommond::NetReadCommond(Connection *con)$/;"	f	class:net::NetReadCommond	signature:(Connection *con)
net::NetReadCommond::NetReadCommond	netevent.h	/^		NetReadCommond(Connection *con);$/;"	p	class:net::NetReadCommond	access:public	signature:(Connection *con)
net::NetReadCommond::_con	netevent.h	/^		Connection *_con = NULL;$/;"	m	class:net::NetReadCommond	access:private
net::NetReadCommond::onCommond	netevent.cpp	/^void NetReadCommond::onCommond()$/;"	f	class:net::NetReadCommond	signature:()
net::NetReadCommond::onCommond	netevent.h	/^		virtual void onCommond();$/;"	p	class:net::NetReadCommond	access:public	signature:()
net::NetReadCommond::~NetReadCommond	netevent.cpp	/^NetReadCommond::~NetReadCommond()$/;"	f	class:net::NetReadCommond	signature:()
net::NetReadCommond::~NetReadCommond	netevent.h	/^		~NetReadCommond();$/;"	p	class:net::NetReadCommond	access:public	signature:()
net::NetReadQueue	netevent.h	/^class NetReadQueue : public Queue<NetReadCommond>$/;"	c	namespace:net	inherits:Queue
net::NetReadQueue::NetReadQueue	netevent.h	/^		NetReadQueue() : Queue<NetReadCommond>() {}$/;"	f	class:net::NetReadQueue	access:private	signature:()
net::NetReadQueue::NetReadQueue	netevent.h	/^		NetReadQueue(const NetReadQueue &T);$/;"	p	class:net::NetReadQueue	access:private	signature:(const NetReadQueue &T)
net::NetReadQueue::instance	netevent.h	/^		static NetReadQueue& instance(){$/;"	f	class:net::NetReadQueue	access:public	signature:()
net::NetReadQueue::operator =	netevent.h	/^		NetReadQueue& operator=(const NetReadQueue &T);$/;"	p	class:net::NetReadQueue	access:private	signature:(const NetReadQueue &T)
net::NetReadQueue::self	netevent.cpp	/^NetReadQueue NetReadQueue::self;$/;"	m	class:net::NetReadQueue	file:
net::NetReadQueue::self	netevent.h	/^		static NetReadQueue self;$/;"	m	class:net::NetReadQueue	access:private
net::NetReadQueue::~NetReadQueue	netevent.h	/^		virtual ~NetReadQueue(){}$/;"	f	class:net::NetReadQueue	access:private	signature:()
net::NetWriteCommond	netevent.h	/^class NetWriteCommond : public Commond$/;"	c	namespace:net	inherits:Commond
net::NetWriteCommond::NetWriteCommond	netevent.cpp	/^NetWriteCommond::NetWriteCommond(Connection *con)$/;"	f	class:net::NetWriteCommond	signature:(Connection *con)
net::NetWriteCommond::NetWriteCommond	netevent.h	/^		NetWriteCommond(Connection *con);$/;"	p	class:net::NetWriteCommond	access:public	signature:(Connection *con)
net::NetWriteCommond::_con	netevent.h	/^		Connection *_con = NULL;$/;"	m	class:net::NetWriteCommond	access:private
net::NetWriteCommond::onCommond	netevent.cpp	/^void NetWriteCommond::onCommond()$/;"	f	class:net::NetWriteCommond	signature:()
net::NetWriteCommond::onCommond	netevent.h	/^		virtual void onCommond();$/;"	p	class:net::NetWriteCommond	access:public	signature:()
net::NetWriteCommond::~NetWriteCommond	netevent.cpp	/^NetWriteCommond::~NetWriteCommond()$/;"	f	class:net::NetWriteCommond	signature:()
net::NetWriteCommond::~NetWriteCommond	netevent.h	/^		~NetWriteCommond();$/;"	p	class:net::NetWriteCommond	access:public	signature:()
net::NetWriteQueue	netevent.h	/^class NetWriteQueue : public Queue<NetWriteCommond>$/;"	c	namespace:net	inherits:Queue
net::NetWriteQueue::NetWriteQueue	netevent.h	/^		NetWriteQueue() : Queue<NetWriteCommond>() {}$/;"	f	class:net::NetWriteQueue	access:private	signature:()
net::NetWriteQueue::NetWriteQueue	netevent.h	/^		NetWriteQueue(const NetWriteQueue &T);$/;"	p	class:net::NetWriteQueue	access:private	signature:(const NetWriteQueue &T)
net::NetWriteQueue::instance	netevent.h	/^		static NetWriteQueue& instance(){$/;"	f	class:net::NetWriteQueue	access:public	signature:()
net::NetWriteQueue::operator =	netevent.h	/^		NetWriteQueue& operator=(const NetWriteQueue &T);$/;"	p	class:net::NetWriteQueue	access:private	signature:(const NetWriteQueue &T)
net::NetWriteQueue::self	netevent.cpp	/^NetWriteQueue NetWriteQueue::self;$/;"	m	class:net::NetWriteQueue	file:
net::NetWriteQueue::self	netevent.h	/^		static NetWriteQueue self;$/;"	m	class:net::NetWriteQueue	access:private
net::NetWriteQueue::~NetWriteQueue	netevent.h	/^		virtual ~NetWriteQueue(){}$/;"	f	class:net::NetWriteQueue	access:private	signature:()
net::Packet	packet.h	/^	class Packet$/;"	c	namespace:net
net::Packet::Packet	packet.cpp	/^	Packet::Packet(char *addr, size_t size):buf(addr),_len(size),_pos(0),next(NULL)$/;"	f	class:net::Packet	signature:(char *addr, size_t size)
net::Packet::Packet	packet.cpp	/^	Packet::Packet(const MemBuffer *T)$/;"	f	class:net::Packet	signature:(const MemBuffer *T)
net::Packet::Packet	packet.h	/^			Packet(char* addr=NULL, size_t size=0);$/;"	p	class:net::Packet	access:public	signature:(char* addr=NULL, size_t size=0)
net::Packet::Packet	packet.h	/^			Packet(const MemBuffer *T);$/;"	p	class:net::Packet	access:public	signature:(const MemBuffer *T)
net::Packet::_head	packet.h	/^			PacketHeader _head;$/;"	m	class:net::Packet	access:public
net::Packet::_headready	packet.h	/^			bool _headready = false;$/;"	m	class:net::Packet	access:public
net::Packet::_len	packet.h	/^			size_t _len;$/;"	m	class:net::Packet	access:private
net::Packet::_pos	packet.h	/^			size_t _pos;			$/;"	m	class:net::Packet	access:private
net::Packet::allocMem	packet.cpp	/^	void Packet::allocMem(size_t size)$/;"	f	class:net::Packet	signature:(size_t size)
net::Packet::allocMem	packet.h	/^			void allocMem(size_t size);$/;"	p	class:net::Packet	access:public	signature:(size_t size)
net::Packet::buf	packet.h	/^			char *buf;$/;"	m	class:net::Packet	access:private
net::Packet::next	packet.h	/^			Packet *next;$/;"	m	class:net::Packet	access:private
net::Packet::operator delete	packet.h	/^			void operator delete (void *p, size_t size){$/;"	f	class:net::Packet	access:public	signature:(void *p, size_t size)
net::Packet::operator new	packet.h	/^			void *operator new(size_t size){$/;"	f	class:net::Packet	access:public	signature:(size_t size)
net::Packet::packetpool	packet.cpp	/^	Mempool<Packet>& Packet::packetpool= Mempool<Packet>::GetInstance();	$/;"	m	class:net::Packet	file:
net::Packet::packetpool	packet.h	/^			static Mempool<Packet> &packetpool;$/;"	m	class:net::Packet	access:public
net::Packet::setByCommon	packet.cpp	/^	void Packet::setByCommon(char *addr, size_t size)$/;"	f	class:net::Packet	signature:(char *addr, size_t size)
net::Packet::setByCommon	packet.h	/^			void setByCommon( char *addr, size_t size);$/;"	p	class:net::Packet	access:public	signature:( char *addr, size_t size)
net::Packet::setByMemBuffer	packet.cpp	/^	void Packet::setByMemBuffer(const MemBuffer* T)$/;"	f	class:net::Packet	signature:(const MemBuffer* T)
net::Packet::setByMemBuffer	packet.h	/^			void setByMemBuffer(const MemBuffer *T);$/;"	p	class:net::Packet	access:public	signature:(const MemBuffer *T)
net::Packet::setNext	packet.h	/^			void setNext(Packet *n){next = n;}	$/;"	f	class:net::Packet	access:public	signature:(Packet *n)
net::Packet::~Packet	packet.cpp	/^	Packet::~Packet()$/;"	f	class:net::Packet	signature:()
net::Packet::~Packet	packet.h	/^			virtual ~Packet();$/;"	p	class:net::Packet	access:public	signature:()
net::PacketHeader	packet.h	/^	class PacketHeader{$/;"	c	namespace:net
net::PacketHeader::_data_len	packet.h	/^			size_t _data_len;$/;"	m	class:net::PacketHeader	access:public
net::PacketQueue	packetqueue.h	/^class PacketQueue : public Lock{$/;"	c	namespace:net	inherits:Lock
net::PacketQueue::Collection	packetqueue.h	/^	typedef std::list<class Packet*> Collection;$/;"	t	class:net::PacketQueue	access:private
net::PacketQueue::PacketQueue	packetqueue.cpp	/^PacketQueue::PacketQueue()$/;"	f	class:net::PacketQueue	signature:()
net::PacketQueue::PacketQueue	packetqueue.h	/^		PacketQueue();$/;"	p	class:net::PacketQueue	access:public	signature:()
net::PacketQueue::addBack	packetqueue.cpp	/^void PacketQueue::addBack(Packet *p)$/;"	f	class:net::PacketQueue	signature:(Packet *p)
net::PacketQueue::addBack	packetqueue.h	/^		void addBack(class Packet *p);$/;"	p	class:net::PacketQueue	access:public	signature:(class Packet *p)
net::PacketQueue::addFront	packetqueue.cpp	/^void PacketQueue::addFront(Packet *p)$/;"	f	class:net::PacketQueue	signature:(Packet *p)
net::PacketQueue::addFront	packetqueue.h	/^		void addFront(class Packet *p);$/;"	p	class:net::PacketQueue	access:public	signature:(class Packet *p)
net::PacketQueue::getBack	packetqueue.cpp	/^Packet* PacketQueue::getBack()$/;"	f	class:net::PacketQueue	signature:()
net::PacketQueue::getBack	packetqueue.h	/^		class Packet* getBack();$/;"	p	class:net::PacketQueue	access:public	signature:()
net::PacketQueue::getFront	packetqueue.cpp	/^Packet* PacketQueue::getFront()$/;"	f	class:net::PacketQueue	signature:()
net::PacketQueue::getFront	packetqueue.h	/^		class Packet* getFront();$/;"	p	class:net::PacketQueue	access:public	signature:()
net::PacketQueue::isEmpty	packetqueue.cpp	/^bool PacketQueue::isEmpty()$/;"	f	class:net::PacketQueue	signature:()
net::PacketQueue::isEmpty	packetqueue.h	/^		bool isEmpty();$/;"	p	class:net::PacketQueue	access:public	signature:()
net::PacketQueue::mPacketList	packetqueue.h	/^		Collection mPacketList;$/;"	m	class:net::PacketQueue	access:private
net::PacketQueue::size	packetqueue.cpp	/^size_t PacketQueue::size()$/;"	f	class:net::PacketQueue	signature:()
net::PacketQueue::size	packetqueue.h	/^		size_t size();$/;"	p	class:net::PacketQueue	access:public	signature:()
net::PacketQueue::~PacketQueue	packetqueue.cpp	/^PacketQueue::~PacketQueue()$/;"	f	class:net::PacketQueue	signature:()
net::PacketQueue::~PacketQueue	packetqueue.h	/^		~PacketQueue();$/;"	p	class:net::PacketQueue	access:public	signature:()
net::ServerSocket	serversocket.h	/^class ServerSocket : public Socket$/;"	c	namespace:net	inherits:Socket
net::ServerSocket::ServerSocket	serversocket.cpp	/^ServerSocket::ServerSocket():Socket(),hostname(NULL)$/;"	f	class:net::ServerSocket	signature:()
net::ServerSocket::ServerSocket	serversocket.h	/^		ServerSocket();$/;"	p	class:net::ServerSocket	access:public	signature:()
net::ServerSocket::ServerSocket	serversocket.h	/^		ServerSocket(const ServerSocket &T);$/;"	p	class:net::ServerSocket	access:private	signature:(const ServerSocket &T)
net::ServerSocket::createSocketAndListen	serversocket.cpp	/^bool ServerSocket::createSocketAndListen(const int port, int blacklog)$/;"	f	class:net::ServerSocket	signature:(const int port, int blacklog)
net::ServerSocket::createSocketAndListen	serversocket.h	/^		bool createSocketAndListen(const int port, int backlog = 1024);$/;"	p	class:net::ServerSocket	access:public	signature:(const int port, int backlog = 1024)
net::ServerSocket::hostname	serversocket.h	/^		char *hostname;$/;"	m	class:net::ServerSocket	access:protected
net::ServerSocket::local_address	serversocket.h	/^		struct sockaddr_in  local_address;	$/;"	m	class:net::ServerSocket	typeref:struct:net::ServerSocket::sockaddr_in	access:protected
net::ServerSocket::operator =	serversocket.h	/^		ServerSocket&  operator=(const ServerSocket &T);$/;"	p	class:net::ServerSocket	access:private	signature:(const ServerSocket &T)
net::ServerSocket::socketListen	serversocket.cpp	/^bool ServerSocket::socketListen(struct sockaddr *sa, socklen_t len, int backlog)$/;"	f	class:net::ServerSocket	signature:(struct sockaddr *sa, socklen_t len, int backlog)
net::ServerSocket::socketListen	serversocket.h	/^		bool socketListen(struct sockaddr *sa, socklen_t len, int backlog);$/;"	p	class:net::ServerSocket	access:private	signature:(struct sockaddr *sa, socklen_t len, int backlog)
net::ServerSocket::~ServerSocket	serversocket.cpp	/^ServerSocket::~ServerSocket()$/;"	f	class:net::ServerSocket	signature:()
net::ServerSocket::~ServerSocket	serversocket.h	/^		~ServerSocket();$/;"	p	class:net::ServerSocket	access:public	signature:()
net::Socket	socket.h	/^class Socket$/;"	c	namespace:net
net::Socket::Socket	socket.cpp	/^Socket::Socket(int fd):sock_fd(fd)$/;"	f	class:net::Socket	signature:(int fd)
net::Socket::Socket	socket.h	/^		Socket(int fd=-1);$/;"	p	class:net::Socket	access:public	signature:(int fd=-1)
net::Socket::closeSocket	socket.cpp	/^bool Socket::closeSocket()$/;"	f	class:net::Socket	signature:()
net::Socket::closeSocket	socket.h	/^		bool closeSocket();$/;"	p	class:net::Socket	access:public	signature:()
net::Socket::createSocket	socket.cpp	/^bool Socket::createSocket(int family, int type, int protocol)$/;"	f	class:net::Socket	signature:(int family, int type, int protocol)
net::Socket::createSocket	socket.h	/^		bool createSocket(int family, int type, int protocol);$/;"	p	class:net::Socket	access:public	signature:(int family, int type, int protocol)
net::Socket::disableNoDelay	socket.cpp	/^bool Socket::disableNoDelay()$/;"	f	class:net::Socket	signature:()
net::Socket::disableNoDelay	socket.h	/^		bool disableNoDelay();$/;"	p	class:net::Socket	access:public	signature:()
net::Socket::enableNoDelay	socket.cpp	/^bool Socket::enableNoDelay()$/;"	f	class:net::Socket	signature:()
net::Socket::enableNoDelay	socket.h	/^		bool enableNoDelay();$/;"	p	class:net::Socket	access:public	signature:()
net::Socket::getPeer	socket.cpp	/^bool Socket::getPeer(char *ip, size_t ip_len, int *port) {$/;"	f	class:net::Socket	signature:(char *ip, size_t ip_len, int *port)
net::Socket::getPeer	socket.h	/^		bool getPeer(char *ip, size_t ip_len, int *port);$/;"	p	class:net::Socket	access:public	signature:(char *ip, size_t ip_len, int *port)
net::Socket::getSockName	socket.cpp	/^bool Socket::getSockName(char *ip, size_t ip_len, int *port) {$/;"	f	class:net::Socket	signature:(char *ip, size_t ip_len, int *port)
net::Socket::getSockName	socket.h	/^		bool getSockName(char *ip, size_t ip_len, int *port);$/;"	p	class:net::Socket	access:public	signature:(char *ip, size_t ip_len, int *port)
net::Socket::getSocketHandle	socket.h	/^		int getSocketHandle(){return sock_fd;}$/;"	f	class:net::Socket	access:public	signature:()
net::Socket::keepLive	socket.cpp	/^int Socket::keepLive(int interval)$/;"	f	class:net::Socket	signature:(int interval)
net::Socket::keepLive	socket.h	/^		int keepLive(int interval=7200);$/;"	p	class:net::Socket	access:public	signature:(int interval=7200)
net::Socket::read	socket.cpp	/^int Socket::read(char* buf, int count)$/;"	f	class:net::Socket	signature:(char* buf, int count)
net::Socket::read	socket.h	/^		int read(char* buf, int count);$/;"	p	class:net::Socket	access:public	signature:(char* buf, int count)
net::Socket::setNoDelay	socket.cpp	/^int Socket::setNoDelay(int val)$/;"	f	class:net::Socket	signature:(int val)
net::Socket::setNoDelay	socket.h	/^		int setNoDelay(int val);$/;"	p	class:net::Socket	access:private	signature:(int val)
net::Socket::setNonBlock	socket.cpp	/^int Socket::setNonBlock()$/;"	f	class:net::Socket	signature:()
net::Socket::setNonBlock	socket.h	/^		int setNonBlock();	$/;"	p	class:net::Socket	access:public	signature:()
net::Socket::setReuse	socket.cpp	/^int Socket::setReuse()$/;"	f	class:net::Socket	signature:()
net::Socket::setReuse	socket.h	/^		int setReuse();$/;"	p	class:net::Socket	access:public	signature:()
net::Socket::setSendBuffer	socket.cpp	/^bool Socket::setSendBuffer(int bufsize)$/;"	f	class:net::Socket	signature:(int bufsize)
net::Socket::setSendBuffer	socket.h	/^		bool setSendBuffer(int bufsize);$/;"	p	class:net::Socket	access:public	signature:(int bufsize)
net::Socket::setSocketHandle	socket.h	/^		void setSocketHandle(int fd){sock_fd = fd;}$/;"	f	class:net::Socket	access:public	signature:(int fd)
net::Socket::sock_fd	socket.h	/^		int sock_fd;$/;"	m	class:net::Socket	access:protected
net::Socket::write	socket.cpp	/^int Socket::write(const char* buf, int count)$/;"	f	class:net::Socket	signature:(const char* buf, int count)
net::Socket::write	socket.h	/^		int write(const char* buf, int count);$/;"	p	class:net::Socket	access:public	signature:(const char* buf, int count)
net::Socket::~Socket	socket.cpp	/^Socket::~Socket()$/;"	f	class:net::Socket	signature:()
net::Socket::~Socket	socket.h	/^		virtual ~Socket();$/;"	p	class:net::Socket	access:public	signature:()
net::SocketStream	socketstream.h	/^	class SocketStream{$/;"	c	namespace:net
net::SocketStream::SocketStream	socketstream.cpp	/^SocketStream::SocketStream(Socket *soc):_socket(soc)$/;"	f	class:net::SocketStream	signature:(Socket *soc)
net::SocketStream::SocketStream	socketstream.h	/^			SocketStream(Socket *soc);$/;"	p	class:net::SocketStream	access:public	signature:(Socket *soc)
net::SocketStream::_buffer_in	socketstream.h	/^			char _buffer_in[16];$/;"	m	class:net::SocketStream	access:private
net::SocketStream::_buffer_out	socketstream.h	/^			char _buffer_out[16];$/;"	m	class:net::SocketStream	access:private
net::SocketStream::_cur_in	socketstream.h	/^			Packet *_cur_in = NULL;$/;"	m	class:net::SocketStream	access:private
net::SocketStream::_cur_out	socketstream.h	/^			Packet *_cur_out = NULL;$/;"	m	class:net::SocketStream	access:private
net::SocketStream::_pos_in	socketstream.h	/^			size_t _pos_in = 0;$/;"	m	class:net::SocketStream	access:private
net::SocketStream::_pos_out	socketstream.h	/^			size_t _pos_out = 0;$/;"	m	class:net::SocketStream	access:private
net::SocketStream::_size_in	socketstream.h	/^			size_t _size_in = sizeof(class PacketHeader);$/;"	m	class:net::SocketStream	access:private
net::SocketStream::_size_out	socketstream.h	/^			size_t _size_out = sizeof(class PacketHeader);$/;"	m	class:net::SocketStream	access:private
net::SocketStream::_socket	socketstream.h	/^			Socket *_socket;$/;"	m	class:net::SocketStream	access:private
net::SocketStream::readToPacket	socketstream.cpp	/^void SocketStream::readToPacket(PacketQueue *queue)$/;"	f	class:net::SocketStream	signature:(PacketQueue *queue)
net::SocketStream::readToPacket	socketstream.h	/^			void readToPacket(PacketQueue *p);$/;"	p	class:net::SocketStream	access:public	signature:(PacketQueue *p)
net::SocketStream::writeFromPacket	socketstream.cpp	/^bool SocketStream::writeFromPacket(PacketQueue* queue)$/;"	f	class:net::SocketStream	signature:(PacketQueue* queue)
net::SocketStream::writeFromPacket	socketstream.h	/^			bool writeFromPacket(PacketQueue *p);$/;"	p	class:net::SocketStream	access:public	signature:(PacketQueue *p)
net::SocketStream::~SocketStream	socketstream.cpp	/^SocketStream::~SocketStream()$/;"	f	class:net::SocketStream	signature:()
net::SocketStream::~SocketStream	socketstream.h	/^			virtual ~SocketStream();$/;"	p	class:net::SocketStream	access:public	signature:()
net::TcpSocketEvent	tcpsocketevent.h	/^class TcpSocketEvent : public EventDescripter$/;"	c	namespace:net	inherits:EventDescripter
net::TcpSocketEvent::TcpSocketEvent	tcpsocketevent.cpp	/^TcpSocketEvent::TcpSocketEvent(int fd, uint32_t eventtype , Connection *con)$/;"	f	class:net::TcpSocketEvent	signature:(int fd, uint32_t eventtype , Connection *con)
net::TcpSocketEvent::TcpSocketEvent	tcpsocketevent.h	/^		TcpSocketEvent(const TcpSocketEvent &T);$/;"	p	class:net::TcpSocketEvent	access:private	signature:(const TcpSocketEvent &T)
net::TcpSocketEvent::TcpSocketEvent	tcpsocketevent.h	/^		TcpSocketEvent(int fd, uint32_t eventtype= EPOLLIN | EPOLLOUT |EPOLLRDHUP, Connection *con=NULL);$/;"	p	class:net::TcpSocketEvent	access:public	signature:(int fd, uint32_t eventtype= EPOLLIN | EPOLLOUT |EPOLLRDHUP, Connection *con=NULL)
net::TcpSocketEvent::_con	tcpsocketevent.h	/^		Connection *_con = NULL;$/;"	m	class:net::TcpSocketEvent	access:private
net::TcpSocketEvent::_err	tcpsocketevent.h	/^		bool _err = false;$/;"	m	class:net::TcpSocketEvent	access:private
net::TcpSocketEvent::_needclose	tcpsocketevent.h	/^		bool _needclose = false;$/;"	m	class:net::TcpSocketEvent	access:private
net::TcpSocketEvent::eventHandler	tcpsocketevent.cpp	/^void TcpSocketEvent::eventHandler(struct epoll_event &ev)$/;"	f	class:net::TcpSocketEvent	signature:(struct epoll_event &ev)
net::TcpSocketEvent::eventHandler	tcpsocketevent.h	/^		virtual void eventHandler(struct epoll_event &ev);$/;"	p	class:net::TcpSocketEvent	access:public	signature:(struct epoll_event &ev)
net::TcpSocketEvent::getNext	tcpsocketevent.h	/^		TcpSocketEvent* getNext()$/;"	f	class:net::TcpSocketEvent	access:public	signature:()
net::TcpSocketEvent::next	tcpsocketevent.h	/^		TcpSocketEvent *next = NULL;$/;"	m	class:net::TcpSocketEvent	access:private
net::TcpSocketEvent::operator =	tcpsocketevent.h	/^		TcpSocketEvent& operator=(const TcpSocketEvent &T);$/;"	p	class:net::TcpSocketEvent	access:private	signature:(const TcpSocketEvent &T)
net::TcpSocketEvent::setNext	tcpsocketevent.h	/^		void setNext(TcpSocketEvent *T){$/;"	f	class:net::TcpSocketEvent	access:public	signature:(TcpSocketEvent *T)
net::TcpSocketEvent::~TcpSocketEvent	tcpsocketevent.cpp	/^TcpSocketEvent::~TcpSocketEvent()$/;"	f	class:net::TcpSocketEvent	signature:()
net::TcpSocketEvent::~TcpSocketEvent	tcpsocketevent.h	/^		~TcpSocketEvent();$/;"	p	class:net::TcpSocketEvent	access:public	signature:()
net::TcpSocketQueue	tcpsocketevent.h	/^class TcpSocketQueue$/;"	c	namespace:net
net::TcpSocketQueue::TcpSocketQueue	tcpsocketevent.cpp	/^TcpSocketQueue::TcpSocketQueue():$/;"	f	class:net::TcpSocketQueue	signature:()
net::TcpSocketQueue::TcpSocketQueue	tcpsocketevent.h	/^		TcpSocketQueue();$/;"	p	class:net::TcpSocketQueue	access:private	signature:()
net::TcpSocketQueue::TcpSocketQueue	tcpsocketevent.h	/^		TcpSocketQueue(const TcpSocketQueue &T);$/;"	p	class:net::TcpSocketQueue	access:private	signature:(const TcpSocketQueue &T)
net::TcpSocketQueue::_head	tcpsocketevent.h	/^		TcpSocketEvent *_head;$/;"	m	class:net::TcpSocketQueue	access:private
net::TcpSocketQueue::_len	tcpsocketevent.h	/^		int _len;$/;"	m	class:net::TcpSocketQueue	access:private
net::TcpSocketQueue::_tail	tcpsocketevent.h	/^		TcpSocketEvent *_tail;$/;"	m	class:net::TcpSocketQueue	access:private
net::TcpSocketQueue::add	tcpsocketevent.cpp	/^void TcpSocketQueue::add(TcpSocketEvent *T)$/;"	f	class:net::TcpSocketQueue	signature:(TcpSocketEvent *T)
net::TcpSocketQueue::add	tcpsocketevent.h	/^		void add(TcpSocketEvent *T);$/;"	p	class:net::TcpSocketQueue	access:public	signature:(TcpSocketEvent *T)
net::TcpSocketQueue::find	tcpsocketevent.cpp	/^TcpSocketEvent* TcpSocketQueue::find(int fd)$/;"	f	class:net::TcpSocketQueue	signature:(int fd)
net::TcpSocketQueue::find	tcpsocketevent.h	/^		TcpSocketEvent* find(int fd);$/;"	p	class:net::TcpSocketQueue	access:public	signature:(int fd)
net::TcpSocketQueue::front	tcpsocketevent.h	/^		TcpSocketEvent* front(){$/;"	f	class:net::TcpSocketQueue	access:public	signature:()
net::TcpSocketQueue::instance	tcpsocketevent.h	/^		static TcpSocketQueue& instance(){$/;"	f	class:net::TcpSocketQueue	access:public	signature:()
net::TcpSocketQueue::operator =	tcpsocketevent.h	/^		TcpSocketQueue& operator=(const TcpSocketQueue &T);$/;"	p	class:net::TcpSocketQueue	access:private	signature:(const TcpSocketQueue &T)
net::TcpSocketQueue::self	tcpsocketevent.cpp	/^TcpSocketQueue TcpSocketQueue::self;$/;"	m	class:net::TcpSocketQueue	file:
net::TcpSocketQueue::self	tcpsocketevent.h	/^		static TcpSocketQueue self;$/;"	m	class:net::TcpSocketQueue	access:private
net::TcpSocketQueue::~TcpSocketQueue	tcpsocketevent.cpp	/^TcpSocketQueue::~TcpSocketQueue()$/;"	f	class:net::TcpSocketQueue	signature:()
net::TcpSocketQueue::~TcpSocketQueue	tcpsocketevent.h	/^		~TcpSocketQueue();$/;"	p	class:net::TcpSocketQueue	access:public	signature:()
net::Transport	datatransport.h	/^class Transport{$/;"	c	namespace:net
net::Transport::Transport	datatransport.cpp	/^Transport::Transport()$/;"	f	class:net::Transport	signature:()
net::Transport::Transport	datatransport.h	/^		Transport();$/;"	p	class:net::Transport	access:private	signature:()
net::Transport::Transport	datatransport.h	/^		Transport(const Transport &T);$/;"	p	class:net::Transport	access:private	signature:(const Transport &T)
net::Transport::errThread	datatransport.cpp	/^TaskQueueThread Transport::errThread;$/;"	m	class:net::Transport	file:
net::Transport::errThread	datatransport.h	/^		static TaskQueueThread errThread;$/;"	m	class:net::Transport	access:private
net::Transport::errThreadInstance	datatransport.h	/^		static TaskQueueThread *errThreadInstance(){$/;"	f	class:net::Transport	access:public	signature:()
net::Transport::instance	datatransport.h	/^		static Transport& instance(){$/;"	f	class:net::Transport	access:public	signature:()
net::Transport::operator =	datatransport.h	/^		Transport& operator=(const Transport &T);$/;"	p	class:net::Transport	access:private	signature:(const Transport &T)
net::Transport::readQueue	datatransport.cpp	/^PacketQueue	Transport::readQueue;$/;"	m	class:net::Transport	file:
net::Transport::readQueue	datatransport.h	/^		static PacketQueue readQueue;$/;"	m	class:net::Transport	access:private
net::Transport::readQueueInstance	datatransport.h	/^		static PacketQueue *readQueueInstance(){$/;"	f	class:net::Transport	access:public	signature:()
net::Transport::readThread	datatransport.cpp	/^TaskQueueThread Transport::readThread;$/;"	m	class:net::Transport	file:
net::Transport::readThread	datatransport.h	/^		static TaskQueueThread readThread;$/;"	m	class:net::Transport	access:private
net::Transport::readThreadInstance	datatransport.h	/^		static TaskQueueThread *readThreadInstance(){$/;"	f	class:net::Transport	access:public	signature:()
net::Transport::self	datatransport.cpp	/^Transport Transport::self;	$/;"	m	class:net::Transport	file:
net::Transport::self	datatransport.h	/^		static Transport self;$/;"	m	class:net::Transport	access:private
net::Transport::writeQueue	datatransport.cpp	/^PacketQueue Transport::writeQueue;$/;"	m	class:net::Transport	file:
net::Transport::writeQueue	datatransport.h	/^		static PacketQUeue writeQueue;$/;"	m	class:net::Transport	access:private
net::Transport::writeQueueInstance	datatransport.h	/^		static PacketQueue *writeQueueInstance(){$/;"	f	class:net::Transport	access:public	signature:()
net::Transport::writeThread	datatransport.cpp	/^TaskQueueThread Transport::writeThread;$/;"	m	class:net::Transport	file:
net::Transport::writeThread	datatransport.h	/^		static TaskQueueThread writeThread;$/;"	m	class:net::Transport	access:private
net::Transport::writeThreadInstance	datatransport.h	/^		static TaskQueueThread *writeThreadInstance(){$/;"	f	class:net::Transport	access:public	signature:()
net::Transport::~Transport	datatransport.cpp	/^Transport::~Transport()$/;"	f	class:net::Transport	signature:()
net::Transport::~Transport	datatransport.h	/^		~Transport();$/;"	p	class:net::Transport	access:public	signature:()
next	listensocketevent.h	/^		ListenEvent *next;$/;"	m	class:net::ListenEvent	access:private
next	mempool.h	/^		Mempool<T, EXPANSION_SIZE> *next;$/;"	m	class:Mempool	access:private
next	message.h	/^		Message *next;$/;"	m	class:Message	access:private
next	packet.h	/^			Packet *next;$/;"	m	class:net::Packet	access:private
next	tcpsocketevent.h	/^		TcpSocketEvent *next = NULL;$/;"	m	class:net::TcpSocketEvent	access:private
notify	object.cpp	/^void Object::notify()$/;"	f	class:Object	signature:()
notify	object.h	/^		void notify();$/;"	p	class:Object	access:public	signature:()
notifyAll	object.cpp	/^void Object::notifyAll()$/;"	f	class:Object	signature:()
notifyAll	object.h	/^		void notifyAll();$/;"	p	class:Object	access:public	signature:()
objsize	mempool.h	/^		static size_t objsize ;$/;"	m	class:Mempool	access:private
objsize	mempool.h	/^size_t Mempool<T, EXPANSION_SIZE>::objsize = sizeof(Mempool<T, EXPANSION_SIZE>)>sizeof(T)?sizeof(Mempool<T, EXPANSION_SIZE>):sizeof(T);$/;"	m	class:Mempool
obtain	message.h	/^		static Message* obtain();$/;"	p	class:Message	access:public	signature:()
obtain	message.h	/^		static Message* obtain(const char* m);$/;"	p	class:Message	access:public	signature:(const char* m)
obtain	message.h	/^		static Message* obtain(string &m);$/;"	p	class:Message	access:public	signature:(string &m)
obtainStatus	status.h	/^		static status obtainStatus(const char* m){$/;"	f	class:status	access:public	signature:(const char* m)
obtainStatusOK	status.h	/^		static const status obtainStatusOK(){$/;"	f	class:status	access:public	signature:()
onCommond	commond.h	/^		virtual void onCommond()=0;$/;"	p	class:sys::Commond	access:public	signature:()
onCommond	netevent.cpp	/^void NetReadCommond::onCommond()$/;"	f	class:net::NetReadCommond	signature:()
onCommond	netevent.cpp	/^void NetWriteCommond::onCommond()$/;"	f	class:net::NetWriteCommond	signature:()
onCommond	netevent.h	/^		virtual void onCommond();$/;"	p	class:net::NetReadCommond	access:public	signature:()
onCommond	netevent.h	/^		virtual void onCommond();$/;"	p	class:net::NetWriteCommond	access:public	signature:()
operator !=	status.h	/^		bool operator!=(const status& T)const{$/;"	f	class:status	access:public	signature:(const status& T) const
operator =	auto_mutex.h	/^		AutoMutex& operator=(const AutoMutex& t);$/;"	p	class:AutoMutex	access:private	signature:(const AutoMutex& t)
operator =	clientsocket.h	/^		ClientSocket& operator=(const ClientSocket &T);$/;"	p	class:net::ClientSocket	access:private	signature:(const ClientSocket &T)
operator =	connectionmanager.h	/^		ConnectionManager& operator=(const ConnectionManager &T);$/;"	p	class:net::ConnectionManager	access:private	signature:(const ConnectionManager &T)
operator =	datatransport.h	/^		Transport& operator=(const Transport &T);$/;"	p	class:net::Transport	access:private	signature:(const Transport &T)
operator =	event_driver.h	/^		EventDescripter& operator=(const EventDescripter& T);$/;"	p	class:EventDescripter	access:private	signature:(const EventDescripter& T)
operator =	event_driver.h	/^		EventDriver& operator=(EventDriver& T);$/;"	p	class:EventDriver	access:private	signature:(EventDriver& T)
operator =	listensocketevent.h	/^		ListenEvent& operator=(const ListenEvent &T);$/;"	p	class:net::ListenEvent	access:private	signature:(const ListenEvent &T)
operator =	listensocketevent.h	/^		ListenEventQueue& operator=(const ListenEventQueue &T);$/;"	p	class:net::ListenEventQueue	access:private	signature:(const ListenEventQueue &T)
operator =	lock.h	/^		Lock& operator=(const Lock& T);$/;"	p	class:Lock	access:private	signature:(const Lock& T)
operator =	logger.h	/^		Logger& operator=(const Logger &T);$/;"	p	class:sys::Logger	access:private	signature:(const Logger &T)
operator =	logger.h	/^		LoggerBuffer& operator=(const LoggerBuffer &T);$/;"	p	class:sys::LoggerBuffer	access:private	signature:(const LoggerBuffer &T)
operator =	memblock.h	/^		MemBlock& operator=(const MemBlock& T);$/;"	p	class:MemBlock	access:private	signature:(const MemBlock& T)
operator =	memblockpool.h	/^		MemBlockPool operator=(const MemBlockPool& T);$/;"	p	class:MemBlockPool	access:private	signature:(const MemBlockPool& T)
operator =	membuffer.cpp	/^MemBuffer& MemBuffer::operator=(const MemBuffer &T)$/;"	f	class:MemBuffer	signature:(const MemBuffer &T)
operator =	membuffer.h	/^		MemBuffer& operator=(const MemBuffer& T);$/;"	p	class:MemBuffer	access:public	signature:(const MemBuffer& T)
operator =	mempool.h	/^		Mempool<T, EXPANSION_SIZE>& operator=(const Mempool<T,EXPANSION_SIZE>& );$/;"	p	class:Mempool	access:private	signature:(const Mempool<T,EXPANSION_SIZE>& )
operator =	message.h	/^		Message& operator=(const Message &m){};$/;"	f	class:Message	access:private	signature:(const Message &m)
operator =	netevent.h	/^		NetReadQueue& operator=(const NetReadQueue &T);$/;"	p	class:net::NetReadQueue	access:private	signature:(const NetReadQueue &T)
operator =	netevent.h	/^		NetWriteQueue& operator=(const NetWriteQueue &T);$/;"	p	class:net::NetWriteQueue	access:private	signature:(const NetWriteQueue &T)
operator =	neteventdriver.h	/^		NetEventDriver& operator=(const NetEventDriver &T);$/;"	p	class:net::NetEventDriver	access:private	signature:(const NetEventDriver &T)
operator =	object.cpp	/^Object& Object::operator=(const Object &T)$/;"	f	class:Object	signature:(const Object &T)
operator =	object.h	/^		Object& operator=(const Object &T);$/;"	p	class:Object	access:public	signature:(const Object &T)
operator =	serversocket.h	/^		ServerSocket&  operator=(const ServerSocket &T);$/;"	p	class:net::ServerSocket	access:private	signature:(const ServerSocket &T)
operator =	taskqueuethread.h	/^		CommondQueue& operator=(const CommondQueue &T);$/;"	p	class:sys::CommondQueue	access:private	signature:(const CommondQueue &T)
operator =	taskqueuethread.h	/^		TaskQueueThread& operator=(const TaskQueueThread &T);$/;"	p	class:sys::TaskQueueThread	access:private	signature:(const TaskQueueThread &T)
operator =	tcpsocketevent.h	/^		TcpSocketEvent& operator=(const TcpSocketEvent &T);$/;"	p	class:net::TcpSocketEvent	access:private	signature:(const TcpSocketEvent &T)
operator =	tcpsocketevent.h	/^		TcpSocketQueue& operator=(const TcpSocketQueue &T);$/;"	p	class:net::TcpSocketQueue	access:private	signature:(const TcpSocketQueue &T)
operator =	thread.h	/^		Thread& operator=(const Thread&);$/;"	p	class:sys::Thread	access:private	signature:(const Thread&)
operator ==	membuffer.cpp	/^bool MemBuffer::operator==(const MemBuffer& T)const$/;"	f	class:MemBuffer	signature:(const MemBuffer& T) const
operator ==	membuffer.h	/^		inline bool operator==(const MemBuffer& T)const;$/;"	p	class:MemBuffer	access:public	signature:(const MemBuffer& T) const
operator ==	status.h	/^		bool operator==(const status& T)const{$/;"	f	class:status	access:public	signature:(const status& T) const
operator delete	main.cpp	/^		void operator delete (void *p, size_t size)$/;"	f	class:packet	access:public	signature:(void *p, size_t size)
operator delete	packet.h	/^			void operator delete (void *p, size_t size){$/;"	f	class:net::Packet	access:public	signature:(void *p, size_t size)
operator new	main.cpp	/^		void* operator new (size_t size)$/;"	f	class:packet	access:public	signature:(size_t size)
operator new	packet.h	/^			void *operator new(size_t size){$/;"	f	class:net::Packet	access:public	signature:(size_t size)
owner	membuffer.h	/^		MemBlock* owner;$/;"	m	class:MemBuffer	access:public
packet	main.cpp	/^class packet{$/;"	c	file:
packet::mempool	main.cpp	/^		static Mempool<packet> *mempool;$/;"	m	class:packet	file:	access:public
packet::mempool	main.cpp	/^Mempool<packet> *packet::mempool = NULL;$/;"	m	class:packet	file:
packet::operator delete	main.cpp	/^		void operator delete (void *p, size_t size)$/;"	f	class:packet	access:public	signature:(void *p, size_t size)
packet::operator new	main.cpp	/^		void* operator new (size_t size)$/;"	f	class:packet	access:public	signature:(size_t size)
packetpool	packet.cpp	/^	Mempool<Packet>& Packet::packetpool= Mempool<Packet>::GetInstance();	$/;"	m	class:net::Packet	file:
packetpool	packet.h	/^			static Mempool<Packet> &packetpool;$/;"	m	class:net::Packet	access:public
pinstance	connectionmanager.cpp	/^ConnectionManager* ConnectionManager::pinstance()$/;"	f	class:net::ConnectionManager	signature:()
pinstance	connectionmanager.h	/^		static ConnectionManager* pinstance();$/;"	p	class:net::ConnectionManager	access:public	signature:()
pos	memblock.h	/^		size_t pos, freesize;$/;"	m	class:MemBlock	access:private
postMessage	messagequeue.cpp	/^void MessageQueue::postMessage(Message* m)$/;"	f	class:MessageQueue	signature:(Message* m)
postMessage	messagequeue.h	/^		void postMessage(Message* m);$/;"	p	class:MessageQueue	access:public	signature:(Message* m)
prepare	connection.cpp	/^void Connection::prepare(PacketQueue *in, PacketQueue *out)$/;"	f	class:net::Connection	signature:(PacketQueue *in, PacketQueue *out)
prepare	connection.h	/^		void prepare(PacketQueue *in, PacketQueue *out);$/;"	p	class:net::Connection	access:public	signature:(PacketQueue *in, PacketQueue *out)
putMemBlock	memblockpool.cpp	/^void MemBlockPool::putMemBlock(MemBlock* T)$/;"	f	class:MemBlockPool	signature:(MemBlock* T)
putMemBlock	memblockpool.h	/^		void putMemBlock(MemBlock* T);$/;"	p	class:MemBlockPool	access:public	signature:(MemBlock* T)
read	socket.cpp	/^int Socket::read(char* buf, int count)$/;"	f	class:net::Socket	signature:(char* buf, int count)
read	socket.h	/^		int read(char* buf, int count);$/;"	p	class:net::Socket	access:public	signature:(char* buf, int count)
readPacket	connection.cpp	/^void Connection::readPacket()$/;"	f	class:net::Connection	signature:()
readPacket	connection.h	/^		void readPacket();$/;"	p	class:net::Connection	access:public	signature:()
readQueue	datatransport.cpp	/^PacketQueue	Transport::readQueue;$/;"	m	class:net::Transport	file:
readQueue	datatransport.h	/^		static PacketQueue readQueue;$/;"	m	class:net::Transport	access:private
readQueueInstance	datatransport.h	/^		static PacketQueue *readQueueInstance(){$/;"	f	class:net::Transport	access:public	signature:()
readThread	datatransport.cpp	/^TaskQueueThread Transport::readThread;$/;"	m	class:net::Transport	file:
readThread	datatransport.h	/^		static TaskQueueThread readThread;$/;"	m	class:net::Transport	access:private
readThreadInstance	datatransport.h	/^		static TaskQueueThread *readThreadInstance(){$/;"	f	class:net::Transport	access:public	signature:()
readToPacket	socketstream.cpp	/^void SocketStream::readToPacket(PacketQueue *queue)$/;"	f	class:net::SocketStream	signature:(PacketQueue *queue)
readToPacket	socketstream.h	/^			void readToPacket(PacketQueue *p);$/;"	p	class:net::SocketStream	access:public	signature:(PacketQueue *p)
ref	refcount.h	/^		atomic_t ref;$/;"	m	class:StrongRef	access:private
remote_address	clientsocket.h	/^		struct sockaddr_in  remote_address;		$/;"	m	class:net::ClientSocket	typeref:struct:net::ClientSocket::sockaddr_in	access:protected
remote_port	clientsocket.h	/^		int remote_port;$/;"	m	class:net::ClientSocket	access:protected
removeCon	connectionmanager.cpp	/^void ConnectionManager::removeCon(Connection *con)$/;"	f	class:net::ConnectionManager	signature:(Connection *con)
removeCon	connectionmanager.h	/^		void removeCon(Connection *con);$/;"	p	class:net::ConnectionManager	access:public	signature:(Connection *con)
removeConByKey	connectionmanager.cpp	/^void ConnectionManager::removeConByKey(int fd)$/;"	f	class:net::ConnectionManager	signature:(int fd)
removeConByKey	connectionmanager.h	/^		void removeConByKey(int fd);$/;"	p	class:net::ConnectionManager	access:public	signature:(int fd)
run	main.cpp	/^	void run()$/;"	f	class:mythread	file:	access:private	signature:()
run	runnable.h	/^		virtual void run()=0;$/;"	p	class:Runnable	access:public	signature:()
run	taskqueuethread.cpp	/^void TaskQueueThread::run()$/;"	f	class:sys::TaskQueueThread	signature:()
run	taskqueuethread.h	/^		virtual void run();$/;"	p	class:sys::TaskQueueThread	access:protected	signature:()
run	thread.h	/^		virtual void run()=0;$/;"	p	class:sys::Thread	access:protected	signature:()
self	connectionmanager.cpp	/^ConnectionManager* ConnectionManager::self=NULL;$/;"	m	class:net::ConnectionManager	file:
self	connectionmanager.h	/^		static ConnectionManager *self;$/;"	m	class:net::ConnectionManager	access:private
self	datatransport.cpp	/^Transport Transport::self;	$/;"	m	class:net::Transport	file:
self	datatransport.h	/^		static Transport self;$/;"	m	class:net::Transport	access:private
self	listensocketevent.cpp	/^ListenEventQueue ListenEventQueue::self;$/;"	m	class:net::ListenEventQueue	file:
self	listensocketevent.h	/^		static ListenEventQueue self;$/;"	m	class:net::ListenEventQueue	access:private
self	logger.cpp	/^Logger Logger::self;$/;"	m	class:sys::Logger	file:
self	logger.h	/^		static Logger self;$/;"	m	class:sys::Logger	access:private
self	memblockpool.cpp	/^MemBlockPool MemBlockPool::self;$/;"	m	class:MemBlockPool	file:
self	memblockpool.h	/^		static MemBlockPool self;		$/;"	m	class:MemBlockPool	access:public
self	mempool.h	/^		static Mempool<T, EXPANSION_SIZE> *self;$/;"	m	class:Mempool	access:private
self	mempool.h	/^Mempool<T, EXPANSION_SIZE>* Mempool<T, EXPANSION_SIZE>::self = NULL;$/;"	m	class:Mempool
self	netevent.cpp	/^NetReadQueue NetReadQueue::self;$/;"	m	class:net::NetReadQueue	file:
self	netevent.cpp	/^NetWriteQueue NetWriteQueue::self;$/;"	m	class:net::NetWriteQueue	file:
self	netevent.h	/^		static NetReadQueue self;$/;"	m	class:net::NetReadQueue	access:private
self	netevent.h	/^		static NetWriteQueue self;$/;"	m	class:net::NetWriteQueue	access:private
self	neteventdriver.cpp	/^NetEventDriver NetEventDriver::self;$/;"	m	class:net::NetEventDriver	file:
self	neteventdriver.h	/^		static NetEventDriver self;$/;"	m	class:net::NetEventDriver	access:private
self	tcpsocketevent.cpp	/^TcpSocketQueue TcpSocketQueue::self;$/;"	m	class:net::TcpSocketQueue	file:
self	tcpsocketevent.h	/^		static TcpSocketQueue self;$/;"	m	class:net::TcpSocketQueue	access:private
setAddress	connection.cpp	/^void Connection::setAddress(sockaddr *addr, size_t addrlen)$/;"	f	class:net::Connection	signature:(sockaddr *addr, size_t addrlen)
setAddress	connection.h	/^		void setAddress(sockaddr *addr, size_t addrlen);		$/;"	p	class:net::Connection	access:public	signature:(sockaddr *addr, size_t addrlen)
setByCommon	packet.cpp	/^	void Packet::setByCommon(char *addr, size_t size)$/;"	f	class:net::Packet	signature:(char *addr, size_t size)
setByCommon	packet.h	/^			void setByCommon( char *addr, size_t size);$/;"	p	class:net::Packet	access:public	signature:( char *addr, size_t size)
setByMemBuffer	packet.cpp	/^	void Packet::setByMemBuffer(const MemBuffer* T)$/;"	f	class:net::Packet	signature:(const MemBuffer* T)
setByMemBuffer	packet.h	/^			void setByMemBuffer(const MemBuffer *T);$/;"	p	class:net::Packet	access:public	signature:(const MemBuffer *T)
setErr	connection.h	/^		void setErr(bool t){$/;"	f	class:net::Connection	access:public	signature:(bool t)
setEvent	event_driver.h	/^		void setEvent(int FD,uint32_t eventtype = EPOLLIN | EPOLLRDHUP)$/;"	f	class:EventDescripter	access:public	signature:(int FD,uint32_t eventtype = EPOLLIN | EPOLLRDHUP)
setNeedClose	connection.h	/^		void setNeedClose(bool t){$/;"	f	class:net::Connection	access:public	signature:(bool t)
setNext	listensocketevent.h	/^		void setNext(ListenEvent *n){$/;"	f	class:net::ListenEvent	access:public	signature:(ListenEvent *n)
setNext	message.h	/^		void setNext(Message* m){next = m;}$/;"	f	class:Message	access:public	signature:(Message* m)
setNext	packet.h	/^			void setNext(Packet *n){next = n;}	$/;"	f	class:net::Packet	access:public	signature:(Packet *n)
setNext	tcpsocketevent.h	/^		void setNext(TcpSocketEvent *T){$/;"	f	class:net::TcpSocketEvent	access:public	signature:(TcpSocketEvent *T)
setNoDelay	socket.cpp	/^int Socket::setNoDelay(int val)$/;"	f	class:net::Socket	signature:(int val)
setNoDelay	socket.h	/^		int setNoDelay(int val);$/;"	p	class:net::Socket	access:private	signature:(int val)
setNonBlock	socket.cpp	/^int Socket::setNonBlock()$/;"	f	class:net::Socket	signature:()
setNonBlock	socket.h	/^		int setNonBlock();	$/;"	p	class:net::Socket	access:public	signature:()
setReuse	socket.cpp	/^int Socket::setReuse()$/;"	f	class:net::Socket	signature:()
setReuse	socket.h	/^		int setReuse();$/;"	p	class:net::Socket	access:public	signature:()
setSendBuffer	socket.cpp	/^bool Socket::setSendBuffer(int bufsize)$/;"	f	class:net::Socket	signature:(int bufsize)
setSendBuffer	socket.h	/^		bool setSendBuffer(int bufsize);$/;"	p	class:net::Socket	access:public	signature:(int bufsize)
setSocketHandle	socket.h	/^		void setSocketHandle(int fd){sock_fd = fd;}$/;"	f	class:net::Socket	access:public	signature:(int fd)
setType	commond.h	/^		void setType(TYPE type){$/;"	f	class:sys::Commond	access:public	signature:(TYPE type)
setWriteable	connection.h	/^		void setWriteable(bool t){$/;"	f	class:net::Connection	access:public	signature:(bool t)
shrink	mempool.h	/^		void shrink();$/;"	p	class:Mempool	access:private	signature:()
shrink	mempool.h	/^void Mempool<T,EXPANSION_SIZE>::shrink()$/;"	f	class:Mempool	signature:()
shrinkMemBlock	memblockpool.cpp	/^bool MemBlockPool::shrinkMemBlock()$/;"	f	class:MemBlockPool	signature:()
shrinkMemBlock	memblockpool.h	/^		bool shrinkMemBlock();$/;"	p	class:MemBlockPool	access:public	signature:()
size	packetqueue.cpp	/^size_t PacketQueue::size()$/;"	f	class:net::PacketQueue	signature:()
size	packetqueue.h	/^		size_t size();$/;"	p	class:net::PacketQueue	access:public	signature:()
size	queue.h	/^		size_t size(){$/;"	f	class:sys::Queue	access:public	signature:()
sock_fd	socket.h	/^		int sock_fd;$/;"	m	class:net::Socket	access:protected
socketListen	serversocket.cpp	/^bool ServerSocket::socketListen(struct sockaddr *sa, socklen_t len, int backlog)$/;"	f	class:net::ServerSocket	signature:(struct sockaddr *sa, socklen_t len, int backlog)
socketListen	serversocket.h	/^		bool socketListen(struct sockaddr *sa, socklen_t len, int backlog);$/;"	p	class:net::ServerSocket	access:private	signature:(struct sockaddr *sa, socklen_t len, int backlog)
start	messagequeue.h	/^		void start(){mStart = true ;}$/;"	f	class:MessageQueue	access:public	signature:()
start	thread.cpp	/^void Thread::start()$/;"	f	class:sys::Thread	signature:()
start	thread.h	/^		void start();$/;"	p	class:sys::Thread	access:public	signature:()
status	status.h	/^		status(){};$/;"	f	class:status	access:private	signature:()
status	status.h	/^		status(const char* w){$/;"	f	class:status	access:public	signature:(const char* w)
status	status.h	/^		status(const status& T){$/;"	f	class:status	access:public	signature:(const status& T)
status	status.h	/^class status$/;"	c
status::getWhat	status.h	/^		const char* getWhat()const{$/;"	f	class:status	access:public	signature:() const
status::mStatusOK	status.h	/^		static const status mStatusOK;$/;"	m	class:status	access:private
status::obtainStatus	status.h	/^		static status obtainStatus(const char* m){$/;"	f	class:status	access:public	signature:(const char* m)
status::obtainStatusOK	status.h	/^		static const status obtainStatusOK(){$/;"	f	class:status	access:public	signature:()
status::operator !=	status.h	/^		bool operator!=(const status& T)const{$/;"	f	class:status	access:public	signature:(const status& T) const
status::operator ==	status.h	/^		bool operator==(const status& T)const{$/;"	f	class:status	access:public	signature:(const status& T) const
status::status	status.h	/^		status(){};$/;"	f	class:status	access:private	signature:()
status::status	status.h	/^		status(const char* w){$/;"	f	class:status	access:public	signature:(const char* w)
status::status	status.h	/^		status(const status& T){$/;"	f	class:status	access:public	signature:(const status& T)
status::test	status.h	/^		static void test(){$/;"	f	class:status	access:public	signature:()
status::what	status.h	/^		const char* what;$/;"	m	class:status	access:private
status::~status	status.h	/^		~status(){};$/;"	f	class:status	access:public	signature:()
stop	thread.cpp	/^void Thread::stop()$/;"	f	class:sys::Thread	signature:()
stop	thread.h	/^		void stop();$/;"	p	class:sys::Thread	access:public	signature:()
stop	thread.h	/^		void stop(){$/;"	f	class:sys::Thread	access:public	signature:()
sys	commond.cpp	/^namespace sys{$/;"	n	file:
sys	commond.h	/^namespace sys{$/;"	n
sys	logger.cpp	/^namespace sys{$/;"	n	file:
sys	logger.h	/^namespace sys{$/;"	n
sys	queue.h	/^namespace sys{$/;"	n
sys	taskqueuethread.cpp	/^namespace sys{$/;"	n	file:
sys	taskqueuethread.h	/^namespace sys{$/;"	n
sys	thread.cpp	/^namespace sys{$/;"	n	file:
sys	thread.h	/^namespace sys{$/;"	n
sys::Commond	commond.h	/^class Commond$/;"	c	namespace:sys
sys::Commond::Commond	commond.cpp	/^Commond::Commond(TYPE type): _type(type)$/;"	f	class:sys::Commond	signature:(TYPE type)
sys::Commond::Commond	commond.h	/^		Commond(TYPE type = TYPE::DEFAULT);$/;"	p	class:sys::Commond	access:public	signature:(TYPE type = TYPE::DEFAULT)
sys::Commond::DEFAULT	commond.h	/^			DEFAULT,$/;"	e	enum:sys::Commond::TYPE
sys::Commond::ERROR	commond.h	/^			ERROR$/;"	e	enum:sys::Commond::TYPE
sys::Commond::READ	commond.h	/^			READ,$/;"	e	enum:sys::Commond::TYPE
sys::Commond::TYPE	commond.h	/^		enum TYPE{$/;"	g	class:sys::Commond	access:public
sys::Commond::WRITE	commond.h	/^			WRITE,$/;"	e	enum:sys::Commond::TYPE
sys::Commond::_type	commond.h	/^		TYPE _type ;$/;"	m	class:sys::Commond	access:private
sys::Commond::getType	commond.h	/^		TYPE getType(){$/;"	f	class:sys::Commond	access:public	signature:()
sys::Commond::onCommond	commond.h	/^		virtual void onCommond()=0;$/;"	p	class:sys::Commond	access:public	signature:()
sys::Commond::setType	commond.h	/^		void setType(TYPE type){$/;"	f	class:sys::Commond	access:public	signature:(TYPE type)
sys::Commond::~Commond	commond.cpp	/^Commond::~Commond()$/;"	f	class:sys::Commond	signature:()
sys::Commond::~Commond	commond.h	/^		virtual ~Commond();$/;"	p	class:sys::Commond	access:public	signature:()
sys::CommondQueue	taskqueuethread.h	/^class CommondQueue : public Queue<Commond>$/;"	c	namespace:sys	inherits:Queue
sys::CommondQueue::CommondQueue	taskqueuethread.h	/^		CommondQueue(){}$/;"	f	class:sys::CommondQueue	access:public	signature:()
sys::CommondQueue::CommondQueue	taskqueuethread.h	/^		CommondQueue(const CommondQueue &T);$/;"	p	class:sys::CommondQueue	access:private	signature:(const CommondQueue &T)
sys::CommondQueue::operator =	taskqueuethread.h	/^		CommondQueue& operator=(const CommondQueue &T);$/;"	p	class:sys::CommondQueue	access:private	signature:(const CommondQueue &T)
sys::CommondQueue::~CommondQueue	taskqueuethread.h	/^		~CommondQueue(){}$/;"	f	class:sys::CommondQueue	access:public	signature:()
sys::LOGBUF_SIZE	logger.h	/^	LOGBUF_SIZE = 4096,$/;"	e	enum:sys::__anon4
sys::Logger	logger.h	/^class Logger : public Lock{$/;"	c	namespace:sys	inherits:Lock
sys::Logger::Logger	logger.cpp	/^Logger::Logger():$/;"	f	class:sys::Logger	signature:()
sys::Logger::Logger	logger.h	/^		Logger();$/;"	p	class:sys::Logger	access:private	signature:()
sys::Logger::Logger	logger.h	/^		Logger(const Logger &T);$/;"	p	class:sys::Logger	access:private	signature:(const Logger &T)
sys::Logger::_cur	logger.h	/^		class LoggerBuffer *_cur;$/;"	m	class:sys::Logger	typeref:class:sys::Logger::LoggerBuffer	access:private
sys::Logger::_fileID	logger.h	/^		int _fileID;$/;"	m	class:sys::Logger	access:private
sys::Logger::_logbuf1	logger.h	/^		class LoggerBuffer _logbuf1;$/;"	m	class:sys::Logger	typeref:class:sys::Logger::LoggerBuffer	access:private
sys::Logger::_logbuf2	logger.h	/^		class LoggerBuffer _logbuf2;$/;"	m	class:sys::Logger	typeref:class:sys::Logger::LoggerBuffer	access:private
sys::Logger::_logfile	logger.h	/^		char *_logfile;$/;"	m	class:sys::Logger	access:private
sys::Logger::appendLine	logger.cpp	/^bool Logger::appendLine(const char* level,const char *line)$/;"	f	class:sys::Logger	signature:(const char* level,const char *line)
sys::Logger::appendLine	logger.h	/^		bool appendLine(const char *level=DEBUG,const char *line=CONTENT);$/;"	p	class:sys::Logger	access:public	signature:(const char *level=DEBUG,const char *line=CONTENT)
sys::Logger::d	logger.h	/^		static void d(const char *line){$/;"	f	class:sys::Logger	access:public	signature:(const char *line)
sys::Logger::e	logger.h	/^		static void e(const char *line){$/;"	f	class:sys::Logger	access:public	signature:(const char *line)
sys::Logger::flushToFile	logger.cpp	/^void Logger::flushToFile(LoggerBuffer *cur, bool newfile)$/;"	f	class:sys::Logger	signature:(LoggerBuffer *cur, bool newfile)
sys::Logger::flushToFile	logger.h	/^		void flushToFile(LoggerBuffer *cur, bool newfile=false);$/;"	p	class:sys::Logger	access:private	signature:(LoggerBuffer *cur, bool newfile=false)
sys::Logger::forceFlush	logger.cpp	/^bool Logger::forceFlush(bool newfile)$/;"	f	class:sys::Logger	signature:(bool newfile)
sys::Logger::forceFlush	logger.h	/^		bool forceFlush(bool newfile=false);$/;"	p	class:sys::Logger	access:public	signature:(bool newfile=false)
sys::Logger::generateLogFileName	logger.cpp	/^void Logger::generateLogFileName(bool newfile)$/;"	f	class:sys::Logger	signature:(bool newfile)
sys::Logger::generateLogFileName	logger.h	/^		void generateLogFileName(bool newfile=false);$/;"	p	class:sys::Logger	access:private	signature:(bool newfile=false)
sys::Logger::i	logger.h	/^		static void i(const char *line){$/;"	f	class:sys::Logger	access:public	signature:(const char *line)
sys::Logger::instance	logger.h	/^		static Logger& instance(){$/;"	f	class:sys::Logger	access:public	signature:()
sys::Logger::operator =	logger.h	/^		Logger& operator=(const Logger &T);$/;"	p	class:sys::Logger	access:private	signature:(const Logger &T)
sys::Logger::self	logger.cpp	/^Logger Logger::self;$/;"	m	class:sys::Logger	file:
sys::Logger::self	logger.h	/^		static Logger self;$/;"	m	class:sys::Logger	access:private
sys::Logger::w	logger.h	/^		static void w(const char *line){$/;"	f	class:sys::Logger	access:public	signature:(const char *line)
sys::Logger::~Logger	logger.cpp	/^Logger::~Logger()$/;"	f	class:sys::Logger	signature:()
sys::Logger::~Logger	logger.h	/^		~Logger();$/;"	p	class:sys::Logger	access:public	signature:()
sys::LoggerBuffer	logger.h	/^class LoggerBuffer{$/;"	c	namespace:sys
sys::LoggerBuffer::LoggerBuffer	logger.cpp	/^LoggerBuffer::LoggerBuffer():$/;"	f	class:sys::LoggerBuffer	signature:()
sys::LoggerBuffer::LoggerBuffer	logger.h	/^		LoggerBuffer();$/;"	p	class:sys::LoggerBuffer	access:public	signature:()
sys::LoggerBuffer::LoggerBuffer	logger.h	/^		LoggerBuffer(const LoggerBuffer &T);$/;"	p	class:sys::LoggerBuffer	access:private	signature:(const LoggerBuffer &T)
sys::LoggerBuffer::_buf	logger.h	/^		unsigned char* _buf;$/;"	m	class:sys::LoggerBuffer	access:public
sys::LoggerBuffer::_pos	logger.h	/^		size_t _pos;$/;"	m	class:sys::LoggerBuffer	access:public
sys::LoggerBuffer::_size	logger.h	/^		size_t _size;$/;"	m	class:sys::LoggerBuffer	access:public
sys::LoggerBuffer::_start	logger.h	/^		size_t _start;$/;"	m	class:sys::LoggerBuffer	access:public
sys::LoggerBuffer::append	logger.cpp	/^bool LoggerBuffer::append(const char*level, const char *info, size_t size)$/;"	f	class:sys::LoggerBuffer	signature:(const char*level, const char *info, size_t size)
sys::LoggerBuffer::append	logger.h	/^		bool append(const char *level,const char* info, size_t size);	$/;"	p	class:sys::LoggerBuffer	access:public	signature:(const char *level,const char* info, size_t size)
sys::LoggerBuffer::hasFreeSpace	logger.h	/^		bool hasFreeSpace(size_t need){return need<_size-_pos;}$/;"	f	class:sys::LoggerBuffer	access:public	signature:(size_t need)
sys::LoggerBuffer::operator =	logger.h	/^		LoggerBuffer& operator=(const LoggerBuffer &T);$/;"	p	class:sys::LoggerBuffer	access:private	signature:(const LoggerBuffer &T)
sys::LoggerBuffer::~LoggerBuffer	logger.cpp	/^LoggerBuffer::~LoggerBuffer()$/;"	f	class:sys::LoggerBuffer	signature:()
sys::LoggerBuffer::~LoggerBuffer	logger.h	/^		~LoggerBuffer();$/;"	p	class:sys::LoggerBuffer	access:public	signature:()
sys::Queue	queue.h	/^class Queue : public Lock{$/;"	c	namespace:sys	inherits:Lock
sys::Queue::Collection	queue.h	/^	typedef std::list<T*> Collection;$/;"	t	class:sys::Queue	access:private
sys::Queue::Queue	queue.h	/^		Queue(){$/;"	f	class:sys::Queue	access:public	signature:()
sys::Queue::addBack	queue.h	/^		void addBack(T *p)$/;"	f	class:sys::Queue	access:public	signature:(T *p)
sys::Queue::addFront	queue.h	/^		void addFront(T *p)$/;"	f	class:sys::Queue	access:public	signature:(T *p)
sys::Queue::getBack	queue.h	/^		T* getBack()$/;"	f	class:sys::Queue	access:public	signature:()
sys::Queue::getFront	queue.h	/^		T* getFront()$/;"	f	class:sys::Queue	access:public	signature:()
sys::Queue::isEmpty	queue.h	/^		bool isEmpty(){$/;"	f	class:sys::Queue	access:public	signature:()
sys::Queue::mList	queue.h	/^		Collection mList;$/;"	m	class:sys::Queue	access:private
sys::Queue::merge	queue.h	/^		void merge(Queue<T*> q)$/;"	f	class:sys::Queue	access:public	signature:(Queue<T*> q)
sys::Queue::size	queue.h	/^		size_t size(){$/;"	f	class:sys::Queue	access:public	signature:()
sys::Queue::~Queue	queue.h	/^		virtual ~Queue()$/;"	f	class:sys::Queue	access:public	signature:()
sys::TaskQueueThread	taskqueuethread.h	/^class TaskQueueThread : public Thread , virtual public Object$/;"	c	namespace:sys	inherits:Thread,Object
sys::TaskQueueThread::TaskQueueThread	taskqueuethread.cpp	/^TaskQueueThread::TaskQueueThread(CommondQueue *queue) : mQueue(queue) $/;"	f	class:sys::TaskQueueThread	signature:(CommondQueue *queue)
sys::TaskQueueThread::TaskQueueThread	taskqueuethread.h	/^		TaskQueueThread(CommondQueue *queue);$/;"	p	class:sys::TaskQueueThread	access:public	signature:(CommondQueue *queue)
sys::TaskQueueThread::TaskQueueThread	taskqueuethread.h	/^		TaskQueueThread(const TaskQueueThread &T);$/;"	p	class:sys::TaskQueueThread	access:private	signature:(const TaskQueueThread &T)
sys::TaskQueueThread::mQueue	taskqueuethread.h	/^		CommondQueue *mQueue;$/;"	m	class:sys::TaskQueueThread	access:private
sys::TaskQueueThread::operator =	taskqueuethread.h	/^		TaskQueueThread& operator=(const TaskQueueThread &T);$/;"	p	class:sys::TaskQueueThread	access:private	signature:(const TaskQueueThread &T)
sys::TaskQueueThread::run	taskqueuethread.cpp	/^void TaskQueueThread::run()$/;"	f	class:sys::TaskQueueThread	signature:()
sys::TaskQueueThread::run	taskqueuethread.h	/^		virtual void run();$/;"	p	class:sys::TaskQueueThread	access:protected	signature:()
sys::TaskQueueThread::~TaskQueueThread	taskqueuethread.cpp	/^TaskQueueThread::~TaskQueueThread()$/;"	f	class:sys::TaskQueueThread	signature:()
sys::TaskQueueThread::~TaskQueueThread	taskqueuethread.h	/^		~TaskQueueThread();$/;"	p	class:sys::TaskQueueThread	access:public	signature:()
sys::Thread	thread.h	/^class Thread : public Runnable{$/;"	c	namespace:sys	inherits:Runnable
sys::Thread::Thread	thread.cpp	/^Thread::Thread():mStop(true)$/;"	f	class:sys::Thread	signature:()
sys::Thread::Thread	thread.h	/^		Thread();$/;"	p	class:sys::Thread	access:public	signature:()
sys::Thread::Thread	thread.h	/^		Thread(const Thread&);$/;"	p	class:sys::Thread	access:private	signature:(const Thread&)
sys::Thread::Thread::thread_func	thread.cpp	/^void* Thread::Thread::thread_func(void *this_)$/;"	f	class:sys::Thread::Thread	signature:(void *this_)
sys::Thread::getThreadHandle	thread.h	/^		pthread_t getThreadHandle(){$/;"	f	class:sys::Thread	access:public	signature:()
sys::Thread::join	thread.cpp	/^void Thread::join()$/;"	f	class:sys::Thread	signature:()
sys::Thread::join	thread.h	/^		void join();$/;"	p	class:sys::Thread	access:public	signature:()
sys::Thread::mStop	thread.h	/^		bool mStop;$/;"	m	class:sys::Thread	access:private
sys::Thread::mTid	thread.h	/^		pthread_t mTid;$/;"	m	class:sys::Thread	access:private
sys::Thread::needRun	thread.h	/^		bool needRun(){$/;"	f	class:sys::Thread	access:public	signature:()
sys::Thread::operator =	thread.h	/^		Thread& operator=(const Thread&);$/;"	p	class:sys::Thread	access:private	signature:(const Thread&)
sys::Thread::run	thread.h	/^		virtual void run()=0;$/;"	p	class:sys::Thread	access:protected	signature:()
sys::Thread::start	thread.cpp	/^void Thread::start()$/;"	f	class:sys::Thread	signature:()
sys::Thread::start	thread.h	/^		void start();$/;"	p	class:sys::Thread	access:public	signature:()
sys::Thread::stop	thread.cpp	/^void Thread::stop()$/;"	f	class:sys::Thread	signature:()
sys::Thread::stop	thread.h	/^		void stop();$/;"	p	class:sys::Thread	access:public	signature:()
sys::Thread::stop	thread.h	/^		void stop(){$/;"	f	class:sys::Thread	access:public	signature:()
sys::Thread::thread_func	thread.h	/^		static void* thread_func(void *this_);$/;"	p	class:sys::Thread	access:public	signature:(void *this_)
sys::Thread::~Thread	thread.h	/^		virtual ~Thread(){};$/;"	f	class:sys::Thread	access:public	signature:()
sys::logFileName	logger.cpp	/^const char* logFileName = "LOG";$/;"	m	namespace:sys	file:
test	event_driver.cpp	/^void EventDriver::test()$/;"	f	class:EventDriver	signature:()
test	event_driver.h	/^		static void test();$/;"	p	class:EventDriver	access:public	signature:()
test	messagequeue.cpp	/^void MessageQueue::test()$/;"	f	class:MessageQueue	signature:()
test	messagequeue.h	/^		static void test();$/;"	p	class:MessageQueue	access:public	signature:()
test	status.h	/^		static void test(){$/;"	f	class:status	access:public	signature:()
thread_func	thread.cpp	/^void* Thread::Thread::thread_func(void *this_)$/;"	f	class:sys::Thread::Thread	signature:(void *this_)
thread_func	thread.h	/^		static void* thread_func(void *this_);$/;"	p	class:sys::Thread	access:public	signature:(void *this_)
toString	message.h	/^		string& toString(){$/;"	f	class:Message	access:public	signature:()
toString	object.cpp	/^const char* Object::toString()$/;"	f	class:Object	signature:()
toString	object.h	/^		virtual const char* toString();$/;"	p	class:Object	access:public	signature:()
trylock	lock.cpp	/^void Lock::trylock()$/;"	f	class:Lock	signature:()
trylock	lock.h	/^		void trylock();$/;"	p	class:Lock	access:public	signature:()
unlock	lock.cpp	/^void Lock::unlock()$/;"	f	class:Lock	signature:()
unlock	lock.h	/^		void unlock();$/;"	p	class:Lock	access:public	signature:()
w	logger.h	/^		static void w(const char *line){$/;"	f	class:sys::Logger	access:public	signature:(const char *line)
wait	object.cpp	/^void Object::wait()$/;"	f	class:Object	signature:()
wait	object.cpp	/^void Object::wait(int sec)$/;"	f	class:Object	signature:(int sec)
wait	object.h	/^		void wait();$/;"	p	class:Object	access:public	signature:()
wait	object.h	/^		void wait(int sec);$/;"	p	class:Object	access:public	signature:(int sec)
what	message.h	/^		string what;$/;"	m	class:Message	access:private
what	status.h	/^		const char* what;$/;"	m	class:status	access:private
write	socket.cpp	/^int Socket::write(const char* buf, int count)$/;"	f	class:net::Socket	signature:(const char* buf, int count)
write	socket.h	/^		int write(const char* buf, int count);$/;"	p	class:net::Socket	access:public	signature:(const char* buf, int count)
writeFromPacket	socketstream.cpp	/^bool SocketStream::writeFromPacket(PacketQueue* queue)$/;"	f	class:net::SocketStream	signature:(PacketQueue* queue)
writeFromPacket	socketstream.h	/^			bool writeFromPacket(PacketQueue *p);$/;"	p	class:net::SocketStream	access:public	signature:(PacketQueue *p)
writePacket	connection.cpp	/^void Connection::writePacket()$/;"	f	class:net::Connection	signature:()
writePacket	connection.h	/^		void writePacket();$/;"	p	class:net::Connection	access:public	signature:()
writeQueue	datatransport.cpp	/^PacketQueue Transport::writeQueue;$/;"	m	class:net::Transport	file:
writeQueue	datatransport.h	/^		static PacketQUeue writeQueue;$/;"	m	class:net::Transport	access:private
writeQueueInstance	datatransport.h	/^		static PacketQueue *writeQueueInstance(){$/;"	f	class:net::Transport	access:public	signature:()
writeThread	datatransport.cpp	/^TaskQueueThread Transport::writeThread;$/;"	m	class:net::Transport	file:
writeThread	datatransport.h	/^		static TaskQueueThread writeThread;$/;"	m	class:net::Transport	access:private
writeThreadInstance	datatransport.h	/^		static TaskQueueThread *writeThreadInstance(){$/;"	f	class:net::Transport	access:public	signature:()
~AutoMutex	auto_mutex.cpp	/^AutoMutex::~AutoMutex()$/;"	f	class:AutoMutex	signature:()
~AutoMutex	auto_mutex.h	/^		~AutoMutex();$/;"	p	class:AutoMutex	access:public	signature:()
~ClientSocket	clientsocket.cpp	/^ClientSocket::~ClientSocket()$/;"	f	class:net::ClientSocket	signature:()
~ClientSocket	clientsocket.h	/^		~ClientSocket();$/;"	p	class:net::ClientSocket	access:public	signature:()
~Commond	commond.cpp	/^Commond::~Commond()$/;"	f	class:sys::Commond	signature:()
~Commond	commond.h	/^		virtual ~Commond();$/;"	p	class:sys::Commond	access:public	signature:()
~CommondQueue	taskqueuethread.h	/^		~CommondQueue(){}$/;"	f	class:sys::CommondQueue	access:public	signature:()
~ConnectedSocket	socket.h	/^		~ConnectedSocket(){::close(sock_fd);}$/;"	f	class:net::ConnectedSocket	access:public	signature:()
~Connection	connection.cpp	/^Connection::~Connection()$/;"	f	class:net::Connection	signature:()
~Connection	connection.h	/^		virtual ~Connection();$/;"	p	class:net::Connection	access:public	signature:()
~ConnectionManager	connectionmanager.cpp	/^ConnectionManager::~ConnectionManager()$/;"	f	class:net::ConnectionManager	signature:()
~ConnectionManager	connectionmanager.h	/^		~ConnectionManager();$/;"	p	class:net::ConnectionManager	access:private	signature:()
~EventDescripter	event_driver.h	/^		virtual ~EventDescripter()$/;"	f	class:EventDescripter	access:public	signature:()
~EventDriver	event_driver.cpp	/^EventDriver::~EventDriver()$/;"	f	class:EventDriver	signature:()
~EventDriver	event_driver.h	/^		virtual ~EventDriver();$/;"	p	class:EventDriver	access:public	signature:()
~ListenEvent	listensocketevent.cpp	/^ListenEvent::~ListenEvent()$/;"	f	class:net::ListenEvent	signature:()
~ListenEvent	listensocketevent.h	/^		~ListenEvent();$/;"	p	class:net::ListenEvent	access:public	signature:()
~ListenEventQueue	listensocketevent.cpp	/^ListenEventQueue::~ListenEventQueue()$/;"	f	class:net::ListenEventQueue	signature:()
~ListenEventQueue	listensocketevent.h	/^		~ListenEventQueue();$/;"	p	class:net::ListenEventQueue	access:public	signature:()
~Lock	lock.cpp	/^Lock::~Lock()$/;"	f	class:Lock	signature:()
~Lock	lock.h	/^		virtual ~Lock();$/;"	p	class:Lock	access:public	signature:()
~Logger	logger.cpp	/^Logger::~Logger()$/;"	f	class:sys::Logger	signature:()
~Logger	logger.h	/^		~Logger();$/;"	p	class:sys::Logger	access:public	signature:()
~LoggerBuffer	logger.cpp	/^LoggerBuffer::~LoggerBuffer()$/;"	f	class:sys::LoggerBuffer	signature:()
~LoggerBuffer	logger.h	/^		~LoggerBuffer();$/;"	p	class:sys::LoggerBuffer	access:public	signature:()
~MemBlock	memblock.cpp	/^MemBlock::~MemBlock()$/;"	f	class:MemBlock	signature:()
~MemBlock	memblock.h	/^		virtual ~MemBlock();$/;"	p	class:MemBlock	access:public	signature:()
~MemBlockPool	memblockpool.cpp	/^MemBlockPool::~MemBlockPool()$/;"	f	class:MemBlockPool	signature:()
~MemBlockPool	memblockpool.h	/^		~MemBlockPool();$/;"	p	class:MemBlockPool	access:public	signature:()
~MemBuffer	membuffer.cpp	/^MemBuffer::~MemBuffer()$/;"	f	class:MemBuffer	signature:()
~MemBuffer	membuffer.h	/^		~MemBuffer();$/;"	p	class:MemBuffer	access:public	signature:()
~Mempool	mempool.h	/^		~Mempool();$/;"	p	class:Mempool	access:private	signature:()
~Mempool	mempool.h	/^Mempool<T, EXPANSION_SIZE>::~Mempool()$/;"	f	class:Mempool	signature:()
~Message	message.h	/^		virtual ~Message(){};$/;"	f	class:Message	access:public	signature:()
~MessageQueue	messagequeue.cpp	/^MessageQueue::~MessageQueue()$/;"	f	class:MessageQueue	signature:()
~MessageQueue	messagequeue.h	/^		~MessageQueue();$/;"	p	class:MessageQueue	access:public	signature:()
~NetEventDriver	neteventdriver.cpp	/^NetEventDriver::~NetEventDriver()$/;"	f	class:net::NetEventDriver	signature:()
~NetEventDriver	neteventdriver.h	/^		~NetEventDriver();$/;"	p	class:net::NetEventDriver	access:public	signature:()
~NetReadCommond	netevent.cpp	/^NetReadCommond::~NetReadCommond()$/;"	f	class:net::NetReadCommond	signature:()
~NetReadCommond	netevent.h	/^		~NetReadCommond();$/;"	p	class:net::NetReadCommond	access:public	signature:()
~NetReadQueue	netevent.h	/^		virtual ~NetReadQueue(){}$/;"	f	class:net::NetReadQueue	access:private	signature:()
~NetWriteCommond	netevent.cpp	/^NetWriteCommond::~NetWriteCommond()$/;"	f	class:net::NetWriteCommond	signature:()
~NetWriteCommond	netevent.h	/^		~NetWriteCommond();$/;"	p	class:net::NetWriteCommond	access:public	signature:()
~NetWriteQueue	netevent.h	/^		virtual ~NetWriteQueue(){}$/;"	f	class:net::NetWriteQueue	access:private	signature:()
~Object	object.cpp	/^Object::~Object()$/;"	f	class:Object	signature:()
~Object	object.h	/^		virtual ~Object();$/;"	p	class:Object	access:public	signature:()
~Packet	packet.cpp	/^	Packet::~Packet()$/;"	f	class:net::Packet	signature:()
~Packet	packet.h	/^			virtual ~Packet();$/;"	p	class:net::Packet	access:public	signature:()
~PacketQueue	packetqueue.cpp	/^PacketQueue::~PacketQueue()$/;"	f	class:net::PacketQueue	signature:()
~PacketQueue	packetqueue.h	/^		~PacketQueue();$/;"	p	class:net::PacketQueue	access:public	signature:()
~Queue	queue.h	/^		virtual ~Queue()$/;"	f	class:sys::Queue	access:public	signature:()
~ServerSocket	serversocket.cpp	/^ServerSocket::~ServerSocket()$/;"	f	class:net::ServerSocket	signature:()
~ServerSocket	serversocket.h	/^		~ServerSocket();$/;"	p	class:net::ServerSocket	access:public	signature:()
~Socket	socket.cpp	/^Socket::~Socket()$/;"	f	class:net::Socket	signature:()
~Socket	socket.h	/^		virtual ~Socket();$/;"	p	class:net::Socket	access:public	signature:()
~SocketStream	socketstream.cpp	/^SocketStream::~SocketStream()$/;"	f	class:net::SocketStream	signature:()
~SocketStream	socketstream.h	/^			virtual ~SocketStream();$/;"	p	class:net::SocketStream	access:public	signature:()
~StrongRef	refcount.cpp	/^StrongRef::~StrongRef()$/;"	f	class:StrongRef	signature:()
~StrongRef	refcount.h	/^		virtual ~StrongRef();$/;"	p	class:StrongRef	access:public	signature:()
~TaskQueueThread	taskqueuethread.cpp	/^TaskQueueThread::~TaskQueueThread()$/;"	f	class:sys::TaskQueueThread	signature:()
~TaskQueueThread	taskqueuethread.h	/^		~TaskQueueThread();$/;"	p	class:sys::TaskQueueThread	access:public	signature:()
~TcpSocketEvent	tcpsocketevent.cpp	/^TcpSocketEvent::~TcpSocketEvent()$/;"	f	class:net::TcpSocketEvent	signature:()
~TcpSocketEvent	tcpsocketevent.h	/^		~TcpSocketEvent();$/;"	p	class:net::TcpSocketEvent	access:public	signature:()
~TcpSocketQueue	tcpsocketevent.cpp	/^TcpSocketQueue::~TcpSocketQueue()$/;"	f	class:net::TcpSocketQueue	signature:()
~TcpSocketQueue	tcpsocketevent.h	/^		~TcpSocketQueue();$/;"	p	class:net::TcpSocketQueue	access:public	signature:()
~Thread	thread.h	/^		virtual ~Thread(){};$/;"	f	class:sys::Thread	access:public	signature:()
~Transport	datatransport.cpp	/^Transport::~Transport()$/;"	f	class:net::Transport	signature:()
~Transport	datatransport.h	/^		~Transport();$/;"	p	class:net::Transport	access:public	signature:()
~status	status.h	/^		~status(){};$/;"	f	class:status	access:public	signature:()
